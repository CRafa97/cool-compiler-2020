.TYPES
type Object {
	

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
}
type Int {
	attribute value

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
}
type String {
	attribute value

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method length : String.length
	method concat : String.concat
	method substr : String.substr
}
type Bool {
	attribute value

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
}
type IO {
	

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method out_string : IO.out_string
	method out_int : IO.out_int
	method in_string : IO.in_string
	method in_int : IO.in_int
}
type Graph {
	attribute vertices
	attribute edges

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method add_vertice : Graph.add_vertice
	method print_E : Graph.print_E
	method print_V : Graph.print_V
}
type Vertice {
	attribute num
	attribute out

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method out_string : IO.out_string
	method out_int : IO.out_int
	method in_string : IO.in_string
	method in_int : IO.in_int
	method outgoing : Vertice.outgoing
	method number : Vertice.number
	method init : Vertice.init
	method add_out : Vertice.add_out
	method print : Vertice.print
}
type Edge {
	attribute from
	attribute to
	attribute weight

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method out_string : IO.out_string
	method out_int : IO.out_int
	method in_string : IO.in_string
	method in_int : IO.in_int
	method init : Edge.init
	method print : Edge.print
}
type EList {
	attribute car

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method out_string : IO.out_string
	method out_int : IO.out_int
	method in_string : IO.in_string
	method in_int : IO.in_int
	method isNil : EList.isNil
	method head : EList.head
	method tail : EList.tail
	method cons : EList.cons
	method append : EList.append
	method print : EList.print
}
type ECons {
	attribute car
	attribute cdr

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method out_string : IO.out_string
	method out_int : IO.out_int
	method in_string : IO.in_string
	method in_int : IO.in_int
	method isNil : ECons.isNil
	method head : ECons.head
	method tail : ECons.tail
	method cons : EList.cons
	method append : EList.append
	method print : ECons.print
	method init : ECons.init
}
type VList {
	attribute car

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method out_string : IO.out_string
	method out_int : IO.out_int
	method in_string : IO.in_string
	method in_int : IO.in_int
	method isNil : VList.isNil
	method head : VList.head
	method tail : VList.tail
	method cons : VList.cons
	method print : VList.print
}
type VCons {
	attribute car
	attribute cdr

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method out_string : IO.out_string
	method out_int : IO.out_int
	method in_string : IO.in_string
	method in_int : IO.in_int
	method isNil : VCons.isNil
	method head : VCons.head
	method tail : VCons.tail
	method cons : VList.cons
	method print : VCons.print
	method init : VCons.init
}
type Parse {
	attribute boolop
	attribute rest

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method out_string : IO.out_string
	method out_int : IO.out_int
	method in_string : IO.in_string
	method in_int : IO.in_int
	method read_input : Parse.read_input
	method parse_line : Parse.parse_line
	method c2i : Parse.c2i
	method a2i : Parse.a2i
	method a2i_aux : Parse.a2i_aux
}
type Main {
	attribute boolop
	attribute rest
	attribute g

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method out_string : IO.out_string
	method out_int : IO.out_int
	method in_string : IO.in_string
	method in_int : IO.in_int
	method read_input : Parse.read_input
	method parse_line : Parse.parse_line
	method c2i : Parse.c2i
	method a2i : Parse.a2i
	method a2i_aux : Parse.a2i_aux
	method main : Main.main
}
type BoolOp {
	

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method and : BoolOp.and
	method or : BoolOp.or
}

.DATA
s_0: Abort called from class 
s_1: 

empty_str: 
s_3:  (
s_4: ,
s_5: )
s_6: \n
s_7: 0
s_8: 1
s_9: 2
s_10: 3
s_11: 4
s_12: 5
s_13: 6
s_14: 7
s_15: 8
s_16: 9
s_17: -
s_18:  

.CODE
function main {
	

	LOCAL instance_0
	LOCAL result_1

	instance_0 = ALLOCATE Main
	result_1 = CALL Main_init
	result_1 = CALL Main.main
	
 RETURN 
}
function Object_init {
	PARAM self

	

	
 RETURN 
}
function Object.abort {
	PARAM self

	LOCAL msg_0
	LOCAL type_name_1
	LOCAL eol_2

	msg_0 = LOAD s_0
	PRINT_STR msg_0
	type_name_1 = TYPEOF self
	PRINT_STR type_name_1
	eol_2 = LOAD s_1
	PRINT_STR eol_2
	HALT
}
function Object.type_name {
	PARAM self

	LOCAL type_name_0
	LOCAL instance_1
	LOCAL result_init_2

	type_name_0 = TYPEOF self
	instance_1 = ALLOCATE String
	result_init_2 = CALL String_init
	
 RETURN instance_1
}
function Object.copy {
	PARAM self

	LOCAL copy_0

	copy_0 = COPY self
	
 RETURN copy_0
}
function IO_init {
	PARAM self

	

	
 RETURN 
}
function IO.out_string {
	PARAM self
	PARAM x

	LOCAL v_0

	v_0 = GetAttr x value 
	PRINT_STR v_0
	
 RETURN self
}
function IO.out_int {
	PARAM self
	PARAM x

	LOCAL v_0

	v_0 = GetAttr x value 
	PRINT_INT v_0
	
 RETURN self
}
function IO.in_string {
	PARAM self

	LOCAL read_str_0
	LOCAL instance_1
	LOCAL result_init_2

	read_str_0 = READ STR
	instance_1 = ALLOCATE String
	result_init_2 = CALL String_init
	
 RETURN instance_1
}
function IO.in_int {
	PARAM self

	LOCAL read_int_0
	LOCAL instance_1
	LOCAL result_init_2

	read_int_0 = READ INT
	instance_1 = ALLOCATE Int
	result_init_2 = CALL Int_init
	
 RETURN instance_1
}
function String_init {
	PARAM self
	PARAM v

	

	SetAttr self value v
	
 RETURN 
}
function String.length {
	PARAM self

	LOCAL length_0
	LOCAL instance_1
	LOCAL result_init_2

	length_0 = LENGTH self
	instance_1 = ALLOCATE Int
	result_init_2 = CALL Int_init
	
 RETURN instance_1
}
function String.concat {
	PARAM self
	PARAM s

	LOCAL str1_0
	LOCAL len1_1
	LOCAL str2_2
	LOCAL len2_3
	LOCAL local_len1_4
	LOCAL local_len2_5
	LOCAL concat_6
	LOCAL instance_7
	LOCAL result_init_8

	str1_0 = GetAttr self value 
	len1_1 = CALL String.length
	str2_2 = GetAttr s value 
	len2_3 = CALL String.length
	local_len1_4 = GetAttr len1_1 value 
	local_len2_5 = GetAttr len2_3 value 
	concat_6 = CONCAT str1_0  str2_2
	instance_7 = ALLOCATE String
	result_init_8 = CALL String_init
	
 RETURN instance_7
}
function String.substr {
	PARAM self
	PARAM i
	PARAM l

	LOCAL i_value_0
	LOCAL l_value_1
	LOCAL subs_result_2
	LOCAL instance_3
	LOCAL result_init_4

	i_value_0 = GetAttr i value 
	l_value_1 = GetAttr l value 
	subs_result_2 = SUBSTR i_value_0  l_value_1  self
	instance_3 = ALLOCATE String
	result_init_4 = CALL String_init
	
 RETURN instance_3
}
function Bool_init {
	PARAM self
	PARAM v

	

	SetAttr self value v
	
 RETURN 
}
function Int_init {
	PARAM self
	PARAM v

	

	SetAttr self value v
	
 RETURN 
}
function String_equals {
	PARAM str1
	PARAM str2

	LOCAL str1_0
	LOCAL str2_1
	LOCAL comparison_result_2

	str1_0 = GetAttr str1 value 
	str2_1 = GetAttr str2 value 
	comparison_result_2 = str1_0 = str2_1
	
 RETURN comparison_result_2
}
function Graph_init {
	PARAM self

	LOCAL result_0
	LOCAL result_1
	LOCAL init_2
	LOCAL result_3
	LOCAL init_4

	result_0 = CALL Object_init
	
 RETURN 
	result_1 = ALLOCATE VList
	init_2 = CALL VList_init
	SetAttr self vertices result_1
	result_3 = ALLOCATE EList
	init_4 = CALL EList_init
	SetAttr self edges result_3
}
function Graph.add_vertice {
	PARAM self
	PARAM v

	LOCAL result_0
	LOCAL result_1
	LOCAL edges_2
	LOCAL result_3
	LOCAL result_4
	LOCAL vertices_5
	LOCAL result_6

	result_1 = VCALL Vertice outgoing 
	edges_2 = GetAttr self edges 
	result_0 = VCALL EList append 
	SetAttr self edges result_0
	vertices_5 = GetAttr self vertices 
	result_4 = VCALL VList cons 
	SetAttr self vertices result_4
	
 RETURN result_4
}
function Graph.print_E {
	PARAM self

	LOCAL result_0
	LOCAL edges_1

	edges_1 = GetAttr self edges 
	result_0 = VCALL EList print 
	
 RETURN result_0
}
function Graph.print_V {
	PARAM self

	LOCAL result_0
	LOCAL vertices_1

	vertices_1 = GetAttr self vertices 
	result_0 = VCALL VList print 
	
 RETURN result_0
}
function Vertice_init {
	PARAM self

	LOCAL result_0
	LOCAL instance_1
	LOCAL value_2
	LOCAL result_init_3
	LOCAL result_4
	LOCAL init_5

	result_0 = CALL IO_init
	
 RETURN 
	instance_1 = ALLOCATE Int
	value_2 = LOAD 0
	result_init_3 = CALL Int_init
	SetAttr self num instance_1
	result_4 = ALLOCATE EList
	init_5 = CALL EList_init
	SetAttr self out result_4
}
function Vertice.outgoing {
	PARAM self

	LOCAL out_0

	out_0 = GetAttr self out 
	
 RETURN out_0
}
function Vertice.number {
	PARAM self

	LOCAL num_0

	num_0 = GetAttr self num 
	
 RETURN num_0
}
function Vertice.init {
	PARAM self
	PARAM n

	LOCAL result_0

	SetAttr self num n
	
 RETURN self
}
function Vertice.add_out {
	PARAM self
	PARAM s

	LOCAL result_0
	LOCAL out_1
	LOCAL result_2

	out_1 = GetAttr self out 
	result_0 = VCALL EList cons 
	SetAttr self out result_0
	
 RETURN self
}
function Vertice.print {
	PARAM self

	LOCAL result_0
	LOCAL num_1
	LOCAL result_2
	LOCAL out_3

	num_1 = GetAttr self num 
	result_0 = VCALL Vertice out_int 
	out_3 = GetAttr self out 
	result_2 = VCALL EList print 
	
 RETURN result_2
}
function Edge_init {
	PARAM self

	LOCAL result_0
	LOCAL instance_1
	LOCAL value_2
	LOCAL result_init_3
	LOCAL instance_4
	LOCAL value_5
	LOCAL result_init_6
	LOCAL instance_7
	LOCAL value_8
	LOCAL result_init_9

	result_0 = CALL IO_init
	
 RETURN 
	instance_1 = ALLOCATE Int
	value_2 = LOAD 0
	result_init_3 = CALL Int_init
	SetAttr self from instance_1
	instance_4 = ALLOCATE Int
	value_5 = LOAD 0
	result_init_6 = CALL Int_init
	SetAttr self to instance_4
	instance_7 = ALLOCATE Int
	value_8 = LOAD 0
	result_init_9 = CALL Int_init
	SetAttr self weight instance_7
}
function Edge.init {
	PARAM self
	PARAM f
	PARAM t
	PARAM w

	LOCAL result_0
	LOCAL result_1
	LOCAL result_2

	SetAttr self from f
	SetAttr self to t
	SetAttr self weight w
	
 RETURN self
}
function Edge.print {
	PARAM self

	LOCAL result_0
	LOCAL internal_1
	LOCAL instance_2
	LOCAL result_init_3
	LOCAL result_4
	LOCAL from_5
	LOCAL result_6
	LOCAL internal_7
	LOCAL instance_8
	LOCAL result_init_9
	LOCAL result_10
	LOCAL to_11
	LOCAL result_12
	LOCAL internal_13
	LOCAL instance_14
	LOCAL result_init_15
	LOCAL result_16
	LOCAL weight_17

	internal_1 = LOAD s_3
	instance_2 = ALLOCATE String
	result_init_3 = CALL String_init
	result_0 = VCALL Edge out_string 
	from_5 = GetAttr self from 
	result_4 = VCALL Edge out_int 
	internal_7 = LOAD s_4
	instance_8 = ALLOCATE String
	result_init_9 = CALL String_init
	result_6 = VCALL Edge out_string 
	to_11 = GetAttr self to 
	result_10 = VCALL Edge out_int 
	internal_13 = LOAD s_5
	instance_14 = ALLOCATE String
	result_init_15 = CALL String_init
	result_12 = VCALL Edge out_string 
	weight_17 = GetAttr self weight 
	result_16 = VCALL Edge out_int 
	
 RETURN result_16
}
function EList_init {
	PARAM self

	LOCAL result_0

	result_0 = CALL IO_init
	
 RETURN 
	SetAttr self car None
}
function EList.isNil {
	PARAM self

	LOCAL instance_0
	LOCAL value_1
	LOCAL result_init_2

	instance_0 = ALLOCATE Bool
	value_1 = LOAD 0
	result_init_2 = CALL Bool_init
	
 RETURN instance_0
}
function EList.head {
	PARAM self

	LOCAL result_0
	LOCAL car_1

	result_0 = VCALL EList abort 
	car_1 = GetAttr self car 
	
 RETURN car_1
}
function EList.tail {
	PARAM self

	LOCAL result_0

	result_0 = VCALL EList abort 
	
 RETURN self
}
function EList.cons {
	PARAM self
	PARAM e

	LOCAL result_0
	LOCAL result_1
	LOCAL init_2

	result_1 = ALLOCATE ECons
	init_2 = CALL ECons_init
	result_0 = VCALL ECons init 
	
 RETURN result_0
}
function EList.append {
	PARAM self
	PARAM l

	LOCAL result_0
	LOCAL result_1
	LOCAL result_2
	LOCAL result_3
	LOCAL result_4
	LOCAL result_5

	result_1 = VCALL EList isNil 
	IF result_1 GOTO label_1
	result_4 = VCALL EList tail 
	result_3 = VCALL EList append 
	result_5 = VCALL EList head 
	result_2 = VCALL EList cons 
	result_0 = result_2
	GOTO label_2
	LABEL label_1
	result_0 = l
	LABEL label_2
	
 RETURN result_0
}
function EList.print {
	PARAM self

	LOCAL result_0
	LOCAL internal_1
	LOCAL instance_2
	LOCAL result_init_3

	internal_1 = LOAD s_6
	instance_2 = ALLOCATE String
	result_init_3 = CALL String_init
	result_0 = VCALL EList out_string 
	
 RETURN result_0
}
function ECons_init {
	PARAM self

	LOCAL result_0

	result_0 = CALL EList_init
	
 RETURN 
	SetAttr self cdr None
}
function ECons.isNil {
	PARAM self

	LOCAL instance_0
	LOCAL value_1
	LOCAL result_init_2

	instance_0 = ALLOCATE Bool
	value_1 = LOAD 0
	result_init_2 = CALL Bool_init
	
 RETURN instance_0
}
function ECons.head {
	PARAM self

	LOCAL car_0

	car_0 = GetAttr self car 
	
 RETURN car_0
}
function ECons.tail {
	PARAM self

	LOCAL cdr_0

	cdr_0 = GetAttr self cdr 
	
 RETURN cdr_0
}
function ECons.init {
	PARAM self
	PARAM e
	PARAM rest

	LOCAL result_0
	LOCAL result_1

	SetAttr self car e
	SetAttr self cdr rest
	
 RETURN self
}
function ECons.print {
	PARAM self

	LOCAL result_0
	LOCAL car_1
	LOCAL result_2
	LOCAL cdr_3

	car_1 = GetAttr self car 
	result_0 = VCALL Edge print 
	cdr_3 = GetAttr self cdr 
	result_2 = VCALL EList print 
	
 RETURN result_2
}
function VList_init {
	PARAM self

	LOCAL result_0

	result_0 = CALL IO_init
	
 RETURN 
	SetAttr self car None
}
function VList.isNil {
	PARAM self

	LOCAL instance_0
	LOCAL value_1
	LOCAL result_init_2

	instance_0 = ALLOCATE Bool
	value_1 = LOAD 0
	result_init_2 = CALL Bool_init
	
 RETURN instance_0
}
function VList.head {
	PARAM self

	LOCAL result_0
	LOCAL car_1

	result_0 = VCALL VList abort 
	car_1 = GetAttr self car 
	
 RETURN car_1
}
function VList.tail {
	PARAM self

	LOCAL result_0

	result_0 = VCALL VList abort 
	
 RETURN self
}
function VList.cons {
	PARAM self
	PARAM v

	LOCAL result_0
	LOCAL result_1
	LOCAL init_2

	result_1 = ALLOCATE VCons
	init_2 = CALL VCons_init
	result_0 = VCALL VCons init 
	
 RETURN result_0
}
function VList.print {
	PARAM self

	LOCAL result_0
	LOCAL internal_1
	LOCAL instance_2
	LOCAL result_init_3

	internal_1 = LOAD s_6
	instance_2 = ALLOCATE String
	result_init_3 = CALL String_init
	result_0 = VCALL VList out_string 
	
 RETURN result_0
}
function VCons_init {
	PARAM self

	LOCAL result_0

	result_0 = CALL VList_init
	
 RETURN 
	SetAttr self cdr None
}
function VCons.isNil {
	PARAM self

	LOCAL instance_0
	LOCAL value_1
	LOCAL result_init_2

	instance_0 = ALLOCATE Bool
	value_1 = LOAD 0
	result_init_2 = CALL Bool_init
	
 RETURN instance_0
}
function VCons.head {
	PARAM self

	LOCAL car_0

	car_0 = GetAttr self car 
	
 RETURN car_0
}
function VCons.tail {
	PARAM self

	LOCAL cdr_0

	cdr_0 = GetAttr self cdr 
	
 RETURN cdr_0
}
function VCons.init {
	PARAM self
	PARAM v
	PARAM rest

	LOCAL result_0
	LOCAL result_1

	SetAttr self car v
	SetAttr self cdr rest
	
 RETURN self
}
function VCons.print {
	PARAM self

	LOCAL result_0
	LOCAL car_1
	LOCAL result_2
	LOCAL cdr_3

	car_1 = GetAttr self car 
	result_0 = VCALL Vertice print 
	cdr_3 = GetAttr self cdr 
	result_2 = VCALL VList print 
	
 RETURN result_2
}
function Parse_init {
	PARAM self

	LOCAL result_0
	LOCAL result_1
	LOCAL init_2
	LOCAL instance_3
	LOCAL value_4
	LOCAL result_init_5

	result_0 = CALL IO_init
	
 RETURN 
	result_1 = ALLOCATE BoolOp
	init_2 = CALL BoolOp_init
	SetAttr self boolop result_1
	instance_3 = ALLOCATE String
	value_4 = LOAD empty_str
	result_init_5 = CALL String_init
	SetAttr self rest instance_3
}
function Parse.read_input {
	PARAM self

	LOCAL result_0
	LOCAL init_1
	LOCAL g_2
	LOCAL result_3
	LOCAL line_4
	LOCAL result_5
	LOCAL result_6
	LOCAL boolop_7
	LOCAL result_8
	LOCAL op_9
	LOCAL internal_10
	LOCAL result_11
	LOCAL op_12
	LOCAL left_13
	LOCAL right_14
	LOCAL internal_15
	LOCAL instance_16
	LOCAL result_init_17
	LOCAL result_init_18
	LOCAL result_init_19
	LOCAL result_20
	LOCAL op_21
	LOCAL internal_22
	LOCAL result_23
	LOCAL op_24
	LOCAL left_25
	LOCAL right_26
	LOCAL internal_27
	LOCAL instance_28
	LOCAL result_init_29
	LOCAL result_init_30
	LOCAL result_init_31
	LOCAL result_32
	LOCAL result_33
	LOCAL result_34
	LOCAL result_35
	LOCAL let_result_36
	LOCAL let_result_37

	result_0 = ALLOCATE Graph
	init_1 = CALL Graph_init
	g_2 = result_0
	result_3 = VCALL Parse in_string 
	line_4 = result_3
	LABEL label_3
	boolop_7 = GetAttr self boolop 
	internal_15 = LOAD empty_str
	instance_16 = ALLOCATE String
	result_init_17 = CALL String_init
	op_12 = CALL String_equals
	result_11 = ALLOCATE Bool
	result_init_18 = CALL Bool_init
	internal_10 = GetAttr result_11 value 
	op_9 = not internal_10
	result_8 = ALLOCATE Bool
	result_init_19 = CALL Bool_init
	internal_27 = LOAD s_6
	instance_28 = ALLOCATE String
	result_init_29 = CALL String_init
	op_24 = CALL String_equals
	result_23 = ALLOCATE Bool
	result_init_30 = CALL Bool_init
	internal_22 = GetAttr result_23 value 
	op_21 = not internal_22
	result_20 = ALLOCATE Bool
	result_init_31 = CALL Bool_init
	result_6 = VCALL BoolOp and 
	IF result_6 GOTO label_4
	GOTO label_5
	LABEL label_4
	result_33 = VCALL Parse parse_line 
	result_32 = VCALL Graph add_vertice 
	result_34 = VCALL Parse in_string 
	line_4 = result_34
	GOTO label_3
	LABEL label_5
	result_5 = LOAD None
	let_result_36 = result_5
	let_result_37 = g_2
	
 RETURN let_result_37
}
function Parse.parse_line {
	PARAM self
	PARAM s

	LOCAL result_0
	LOCAL result_1
	LOCAL init_2
	LOCAL result_3
	LOCAL v_4
	LOCAL result_5
	LOCAL result_6
	LOCAL op_7
	LOCAL internal_8
	LOCAL result_9
	LOCAL op_10
	LOCAL left_11
	LOCAL right_12
	LOCAL result_13
	LOCAL rest_14
	LOCAL instance_15
	LOCAL value_16
	LOCAL result_init_17
	LOCAL result_init_18
	LOCAL result_init_19
	LOCAL result_20
	LOCAL rest_21
	LOCAL succ_22
	LOCAL result_23
	LOCAL rest_24
	LOCAL weight_25
	LOCAL result_26
	LOCAL result_27
	LOCAL result_28
	LOCAL init_29
	LOCAL result_30
	LOCAL let_result_31
	LOCAL let_result_32
	LOCAL let_result_33

	result_1 = ALLOCATE Vertice
	init_2 = CALL Vertice_init
	result_3 = VCALL Parse a2i 
	result_0 = VCALL Vertice init 
	v_4 = result_0
	LABEL label_6
	rest_14 = GetAttr self rest 
	result_13 = VCALL String length 
	instance_15 = ALLOCATE Int
	value_16 = LOAD 0
	result_init_17 = CALL Int_init
	left_11 = GetAttr result_13 value 
	right_12 = GetAttr instance_15 value 
	op_10 = left_11 = right_12
	result_9 = ALLOCATE Bool
	result_init_18 = CALL Bool_init
	internal_8 = GetAttr result_9 value 
	op_7 = not internal_8
	result_6 = ALLOCATE Bool
	result_init_19 = CALL Bool_init
	IF result_6 GOTO label_7
	GOTO label_8
	LABEL label_7
	rest_21 = GetAttr self rest 
	result_20 = VCALL Parse a2i 
	succ_22 = result_20
	rest_24 = GetAttr self rest 
	result_23 = VCALL Parse a2i 
	weight_25 = result_23
	result_28 = ALLOCATE Edge
	init_29 = CALL Edge_init
	result_30 = VCALL Vertice number 
	result_27 = VCALL Edge init 
	result_26 = VCALL Vertice add_out 
	let_result_31 = result_26
	let_result_32 = let_result_31
	GOTO label_6
	LABEL label_8
	result_5 = LOAD None
	let_result_33 = v_4
	
 RETURN let_result_33
}
function Parse.c2i {
	PARAM self
	PARAM char

	LOCAL result_0
	LOCAL result_1
	LOCAL op_2
	LOCAL left_3
	LOCAL right_4
	LOCAL internal_5
	LOCAL instance_6
	LOCAL result_init_7
	LOCAL result_init_8
	LOCAL result_9
	LOCAL result_10
	LOCAL op_11
	LOCAL left_12
	LOCAL right_13
	LOCAL internal_14
	LOCAL instance_15
	LOCAL result_init_16
	LOCAL result_init_17
	LOCAL result_18
	LOCAL result_19
	LOCAL op_20
	LOCAL left_21
	LOCAL right_22
	LOCAL internal_23
	LOCAL instance_24
	LOCAL result_init_25
	LOCAL result_init_26
	LOCAL result_27
	LOCAL result_28
	LOCAL op_29
	LOCAL left_30
	LOCAL right_31
	LOCAL internal_32
	LOCAL instance_33
	LOCAL result_init_34
	LOCAL result_init_35
	LOCAL result_36
	LOCAL result_37
	LOCAL op_38
	LOCAL left_39
	LOCAL right_40
	LOCAL internal_41
	LOCAL instance_42
	LOCAL result_init_43
	LOCAL result_init_44
	LOCAL result_45
	LOCAL result_46
	LOCAL op_47
	LOCAL left_48
	LOCAL right_49
	LOCAL internal_50
	LOCAL instance_51
	LOCAL result_init_52
	LOCAL result_init_53
	LOCAL result_54
	LOCAL result_55
	LOCAL op_56
	LOCAL left_57
	LOCAL right_58
	LOCAL internal_59
	LOCAL instance_60
	LOCAL result_init_61
	LOCAL result_init_62
	LOCAL result_63
	LOCAL result_64
	LOCAL op_65
	LOCAL left_66
	LOCAL right_67
	LOCAL internal_68
	LOCAL instance_69
	LOCAL result_init_70
	LOCAL result_init_71
	LOCAL result_72
	LOCAL result_73
	LOCAL op_74
	LOCAL left_75
	LOCAL right_76
	LOCAL internal_77
	LOCAL instance_78
	LOCAL result_init_79
	LOCAL result_init_80
	LOCAL result_81
	LOCAL result_82
	LOCAL op_83
	LOCAL left_84
	LOCAL right_85
	LOCAL internal_86
	LOCAL instance_87
	LOCAL result_init_88
	LOCAL result_init_89
	LOCAL result_90
	LOCAL instance_91
	LOCAL value_92
	LOCAL result_init_93
	LOCAL instance_94
	LOCAL value_95
	LOCAL result_init_96
	LOCAL instance_97
	LOCAL value_98
	LOCAL result_init_99
	LOCAL instance_100
	LOCAL value_101
	LOCAL result_init_102
	LOCAL instance_103
	LOCAL value_104
	LOCAL result_init_105
	LOCAL instance_106
	LOCAL value_107
	LOCAL result_init_108
	LOCAL instance_109
	LOCAL value_110
	LOCAL result_init_111
	LOCAL instance_112
	LOCAL value_113
	LOCAL result_init_114
	LOCAL instance_115
	LOCAL value_116
	LOCAL result_init_117
	LOCAL instance_118
	LOCAL value_119
	LOCAL result_init_120
	LOCAL instance_121
	LOCAL value_122
	LOCAL result_init_123

	internal_5 = LOAD s_7
	instance_6 = ALLOCATE String
	result_init_7 = CALL String_init
	op_2 = CALL String_equals
	result_1 = ALLOCATE Bool
	result_init_8 = CALL Bool_init
	IF result_1 GOTO label_9
	internal_14 = LOAD s_8
	instance_15 = ALLOCATE String
	result_init_16 = CALL String_init
	op_11 = CALL String_equals
	result_10 = ALLOCATE Bool
	result_init_17 = CALL Bool_init
	IF result_10 GOTO label_10
	internal_23 = LOAD s_9
	instance_24 = ALLOCATE String
	result_init_25 = CALL String_init
	op_20 = CALL String_equals
	result_19 = ALLOCATE Bool
	result_init_26 = CALL Bool_init
	IF result_19 GOTO label_11
	internal_32 = LOAD s_10
	instance_33 = ALLOCATE String
	result_init_34 = CALL String_init
	op_29 = CALL String_equals
	result_28 = ALLOCATE Bool
	result_init_35 = CALL Bool_init
	IF result_28 GOTO label_12
	internal_41 = LOAD s_11
	instance_42 = ALLOCATE String
	result_init_43 = CALL String_init
	op_38 = CALL String_equals
	result_37 = ALLOCATE Bool
	result_init_44 = CALL Bool_init
	IF result_37 GOTO label_13
	internal_50 = LOAD s_12
	instance_51 = ALLOCATE String
	result_init_52 = CALL String_init
	op_47 = CALL String_equals
	result_46 = ALLOCATE Bool
	result_init_53 = CALL Bool_init
	IF result_46 GOTO label_14
	internal_59 = LOAD s_13
	instance_60 = ALLOCATE String
	result_init_61 = CALL String_init
	op_56 = CALL String_equals
	result_55 = ALLOCATE Bool
	result_init_62 = CALL Bool_init
	IF result_55 GOTO label_15
	internal_68 = LOAD s_14
	instance_69 = ALLOCATE String
	result_init_70 = CALL String_init
	op_65 = CALL String_equals
	result_64 = ALLOCATE Bool
	result_init_71 = CALL Bool_init
	IF result_64 GOTO label_16
	internal_77 = LOAD s_15
	instance_78 = ALLOCATE String
	result_init_79 = CALL String_init
	op_74 = CALL String_equals
	result_73 = ALLOCATE Bool
	result_init_80 = CALL Bool_init
	IF result_73 GOTO label_17
	internal_86 = LOAD s_16
	instance_87 = ALLOCATE String
	result_init_88 = CALL String_init
	op_83 = CALL String_equals
	result_82 = ALLOCATE Bool
	result_init_89 = CALL Bool_init
	IF result_82 GOTO label_18
	result_90 = VCALL Parse abort 
	instance_91 = ALLOCATE Int
	value_92 = LOAD 0
	result_init_93 = CALL Int_init
	result_81 = instance_91
	GOTO label_19
	LABEL label_18
	instance_94 = ALLOCATE Int
	value_95 = LOAD 9
	result_init_96 = CALL Int_init
	result_81 = instance_94
	LABEL label_19
	result_72 = result_81
	GOTO label_20
	LABEL label_17
	instance_97 = ALLOCATE Int
	value_98 = LOAD 8
	result_init_99 = CALL Int_init
	result_72 = instance_97
	LABEL label_20
	result_63 = result_72
	GOTO label_21
	LABEL label_16
	instance_100 = ALLOCATE Int
	value_101 = LOAD 7
	result_init_102 = CALL Int_init
	result_63 = instance_100
	LABEL label_21
	result_54 = result_63
	GOTO label_22
	LABEL label_15
	instance_103 = ALLOCATE Int
	value_104 = LOAD 6
	result_init_105 = CALL Int_init
	result_54 = instance_103
	LABEL label_22
	result_45 = result_54
	GOTO label_23
	LABEL label_14
	instance_106 = ALLOCATE Int
	value_107 = LOAD 5
	result_init_108 = CALL Int_init
	result_45 = instance_106
	LABEL label_23
	result_36 = result_45
	GOTO label_24
	LABEL label_13
	instance_109 = ALLOCATE Int
	value_110 = LOAD 4
	result_init_111 = CALL Int_init
	result_36 = instance_109
	LABEL label_24
	result_27 = result_36
	GOTO label_25
	LABEL label_12
	instance_112 = ALLOCATE Int
	value_113 = LOAD 3
	result_init_114 = CALL Int_init
	result_27 = instance_112
	LABEL label_25
	result_18 = result_27
	GOTO label_26
	LABEL label_11
	instance_115 = ALLOCATE Int
	value_116 = LOAD 2
	result_init_117 = CALL Int_init
	result_18 = instance_115
	LABEL label_26
	result_9 = result_18
	GOTO label_27
	LABEL label_10
	instance_118 = ALLOCATE Int
	value_119 = LOAD 1
	result_init_120 = CALL Int_init
	result_9 = instance_118
	LABEL label_27
	result_0 = result_9
	GOTO label_28
	LABEL label_9
	instance_121 = ALLOCATE Int
	value_122 = LOAD 0
	result_init_123 = CALL Int_init
	result_0 = instance_121
	LABEL label_28
	
 RETURN result_0
}
function Parse.a2i {
	PARAM self
	PARAM s

	LOCAL result_0
	LOCAL result_1
	LOCAL op_2
	LOCAL left_3
	LOCAL right_4
	LOCAL result_5
	LOCAL instance_6
	LOCAL value_7
	LOCAL result_init_8
	LOCAL result_init_9
	LOCAL result_10
	LOCAL result_11
	LOCAL op_12
	LOCAL left_13
	LOCAL right_14
	LOCAL result_15
	LOCAL instance_16
	LOCAL value_17
	LOCAL result_init_18
	LOCAL instance_19
	LOCAL value_20
	LOCAL result_init_21
	LOCAL internal_22
	LOCAL instance_23
	LOCAL result_init_24
	LOCAL result_init_25
	LOCAL result_26
	LOCAL result_27
	LOCAL op_28
	LOCAL left_29
	LOCAL right_30
	LOCAL result_31
	LOCAL instance_32
	LOCAL value_33
	LOCAL result_init_34
	LOCAL instance_35
	LOCAL value_36
	LOCAL result_init_37
	LOCAL internal_38
	LOCAL instance_39
	LOCAL result_init_40
	LOCAL result_init_41
	LOCAL result_42
	LOCAL result_43
	LOCAL result_44
	LOCAL result_45
	LOCAL op_46
	LOCAL left_47
	LOCAL right_48
	LOCAL result_49
	LOCAL instance_50
	LOCAL value_51
	LOCAL result_init_52
	LOCAL result_init_53
	LOCAL instance_54
	LOCAL value_55
	LOCAL result_init_56
	LOCAL result_57
	LOCAL op_58
	LOCAL internal_59
	LOCAL result_60
	LOCAL result_61
	LOCAL result_62
	LOCAL op_63
	LOCAL left_64
	LOCAL right_65
	LOCAL result_66
	LOCAL instance_67
	LOCAL value_68
	LOCAL result_init_69
	LOCAL result_init_70
	LOCAL instance_71
	LOCAL value_72
	LOCAL result_init_73
	LOCAL result_init_74
	LOCAL instance_75
	LOCAL value_76
	LOCAL result_init_77

	result_5 = VCALL String length 
	instance_6 = ALLOCATE Int
	value_7 = LOAD 0
	result_init_8 = CALL Int_init
	left_3 = GetAttr result_5 value 
	right_4 = GetAttr instance_6 value 
	op_2 = left_3 = right_4
	result_1 = ALLOCATE Bool
	result_init_9 = CALL Bool_init
	IF result_1 GOTO label_29
	instance_16 = ALLOCATE Int
	value_17 = LOAD 1
	result_init_18 = CALL Int_init
	instance_19 = ALLOCATE Int
	value_20 = LOAD 0
	result_init_21 = CALL Int_init
	result_15 = VCALL String substr 
	internal_22 = LOAD s_17
	instance_23 = ALLOCATE String
	result_init_24 = CALL String_init
	left_13 = GetAttr result_15 value 
	right_14 = GetAttr instance_23 value 
	op_12 = left_13 = right_14
	result_11 = ALLOCATE Bool
	result_init_25 = CALL Bool_init
	IF result_11 GOTO label_30
	instance_32 = ALLOCATE Int
	value_33 = LOAD 1
	result_init_34 = CALL Int_init
	instance_35 = ALLOCATE Int
	value_36 = LOAD 0
	result_init_37 = CALL Int_init
	result_31 = VCALL String substr 
	internal_38 = LOAD s_18
	instance_39 = ALLOCATE String
	result_init_40 = CALL String_init
	left_29 = GetAttr result_31 value 
	right_30 = GetAttr instance_39 value 
	op_28 = left_29 = right_30
	result_27 = ALLOCATE Bool
	result_init_41 = CALL Bool_init
	IF result_27 GOTO label_31
	result_42 = VCALL Parse a2i_aux 
	result_26 = result_42
	GOTO label_32
	LABEL label_31
	result_49 = VCALL String length 
	instance_50 = ALLOCATE Int
	value_51 = LOAD 1
	result_init_52 = CALL Int_init
	left_47 = GetAttr result_49 value 
	right_48 = GetAttr instance_50 value 
	op_46 = left_47 - right_48
	result_45 = ALLOCATE Int
	result_init_53 = CALL Int_init
	instance_54 = ALLOCATE Int
	value_55 = LOAD 1
	result_init_56 = CALL Int_init
	result_44 = VCALL String substr 
	result_43 = VCALL Parse a2i 
	result_26 = result_43
	LABEL label_32
	result_10 = result_26
	GOTO label_33
	LABEL label_30
	result_66 = VCALL String length 
	instance_67 = ALLOCATE Int
	value_68 = LOAD 1
	result_init_69 = CALL Int_init
	left_64 = GetAttr result_66 value 
	right_65 = GetAttr instance_67 value 
	op_63 = left_64 - right_65
	result_62 = ALLOCATE Int
	result_init_70 = CALL Int_init
	instance_71 = ALLOCATE Int
	value_72 = LOAD 1
	result_init_73 = CALL Int_init
	result_61 = VCALL String substr 
	result_60 = VCALL Parse a2i_aux 
	internal_59 = GetAttr result_60 value 
	op_58 = ~ internal_59
	result_57 = ALLOCATE Int
	result_init_74 = CALL Int_init
	result_10 = result_57
	LABEL label_33
	result_0 = result_10
	GOTO label_34
	LABEL label_29
	instance_75 = ALLOCATE Int
	value_76 = LOAD 0
	result_init_77 = CALL Int_init
	result_0 = instance_75
	LABEL label_34
	
 RETURN result_0
}
function Parse.a2i_aux {
	PARAM self
	PARAM s

	LOCAL instance_0
	LOCAL value_1
	LOCAL result_init_2
	LOCAL int_3
	LOCAL result_4
	LOCAL j_5
	LOCAL instance_6
	LOCAL value_7
	LOCAL result_init_8
	LOCAL i_9
	LOCAL result_10
	LOCAL result_11
	LOCAL op_12
	LOCAL left_13
	LOCAL right_14
	LOCAL result_init_15
	LOCAL result_16
	LOCAL instance_17
	LOCAL value_18
	LOCAL result_init_19
	LOCAL c_20
	LOCAL result_21
	LOCAL result_22
	LOCAL op_23
	LOCAL left_24
	LOCAL right_25
	LOCAL internal_26
	LOCAL instance_27
	LOCAL result_init_28
	LOCAL result_init_29
	LOCAL result_30
	LOCAL result_31
	LOCAL op_32
	LOCAL left_33
	LOCAL right_34
	LOCAL internal_35
	LOCAL instance_36
	LOCAL result_init_37
	LOCAL result_init_38
	LOCAL result_39
	LOCAL op_40
	LOCAL left_41
	LOCAL right_42
	LOCAL result_43
	LOCAL op_44
	LOCAL left_45
	LOCAL right_46
	LOCAL instance_47
	LOCAL value_48
	LOCAL result_init_49
	LOCAL result_init_50
	LOCAL result_51
	LOCAL result_52
	LOCAL instance_53
	LOCAL value_54
	LOCAL result_init_55
	LOCAL result_init_56
	LOCAL result_57
	LOCAL result_58
	LOCAL op_59
	LOCAL left_60
	LOCAL right_61
	LOCAL instance_62
	LOCAL value_63
	LOCAL result_init_64
	LOCAL result_init_65
	LOCAL result_66
	LOCAL result_67
	LOCAL result_68
	LOCAL op_69
	LOCAL left_70
	LOCAL right_71
	LOCAL result_init_72
	LOCAL internal_73
	LOCAL instance_74
	LOCAL result_init_75
	LOCAL internal_76
	LOCAL instance_77
	LOCAL result_init_78
	LOCAL result_79
	LOCAL result_80
	LOCAL result_81
	LOCAL op_82
	LOCAL left_83
	LOCAL right_84
	LOCAL result_85
	LOCAL op_86
	LOCAL left_87
	LOCAL right_88
	LOCAL result_89
	LOCAL result_init_90
	LOCAL instance_91
	LOCAL value_92
	LOCAL result_init_93
	LOCAL result_init_94
	LOCAL result_95
	LOCAL op_96
	LOCAL left_97
	LOCAL right_98
	LOCAL instance_99
	LOCAL value_100
	LOCAL result_init_101
	LOCAL result_init_102
	LOCAL result_103
	LOCAL result_104
	LOCAL result_105
	LOCAL result_106
	LOCAL op_107
	LOCAL left_108
	LOCAL right_109
	LOCAL result_110
	LOCAL op_111
	LOCAL left_112
	LOCAL right_113
	LOCAL result_114
	LOCAL result_init_115
	LOCAL instance_116
	LOCAL value_117
	LOCAL result_init_118
	LOCAL result_init_119
	LOCAL result_120
	LOCAL op_121
	LOCAL left_122
	LOCAL right_123
	LOCAL instance_124
	LOCAL value_125
	LOCAL result_init_126
	LOCAL result_init_127
	LOCAL result_128
	LOCAL result_129
	LOCAL let_result_130
	LOCAL let_result_131
	LOCAL let_result_132
	LOCAL let_result_133

	instance_0 = ALLOCATE Int
	value_1 = LOAD 0
	result_init_2 = CALL Int_init
	int_3 = instance_0
	result_4 = VCALL String length 
	j_5 = result_4
	instance_6 = ALLOCATE Int
	value_7 = LOAD 0
	result_init_8 = CALL Int_init
	i_9 = instance_6
	LABEL label_35
	left_13 = GetAttr i_9 value 
	right_14 = GetAttr j_5 value 
	op_12 = left_13 < right_14
	result_11 = ALLOCATE Bool
	result_init_15 = CALL Bool_init
	IF result_11 GOTO label_36
	GOTO label_37
	LABEL label_36
	instance_17 = ALLOCATE Int
	value_18 = LOAD 1
	result_init_19 = CALL Int_init
	result_16 = VCALL String substr 
	c_20 = result_16
	internal_26 = LOAD s_18
	instance_27 = ALLOCATE String
	result_init_28 = CALL String_init
	op_23 = CALL String_equals
	result_22 = ALLOCATE Bool
	result_init_29 = CALL Bool_init
	IF result_22 GOTO label_38
	internal_35 = LOAD s_4
	instance_36 = ALLOCATE String
	result_init_37 = CALL String_init
	op_32 = CALL String_equals
	result_31 = ALLOCATE Bool
	result_init_38 = CALL Bool_init
	IF result_31 GOTO label_39
	instance_47 = ALLOCATE Int
	value_48 = LOAD 10
	result_init_49 = CALL Int_init
	left_45 = GetAttr int_3 value 
	right_46 = GetAttr instance_47 value 
	op_44 = left_45 * right_46
	result_43 = ALLOCATE Int
	result_init_50 = CALL Int_init
	instance_53 = ALLOCATE Int
	value_54 = LOAD 1
	result_init_55 = CALL Int_init
	result_52 = VCALL String substr 
	result_51 = VCALL Parse c2i 
	left_41 = GetAttr result_43 value 
	right_42 = GetAttr result_51 value 
	op_40 = left_41 + right_42
	result_39 = ALLOCATE Int
	result_init_56 = CALL Int_init
	int_3 = result_39
	instance_62 = ALLOCATE Int
	value_63 = LOAD 1
	result_init_64 = CALL Int_init
	left_60 = GetAttr i_9 value 
	right_61 = GetAttr instance_62 value 
	op_59 = left_60 + right_61
	result_58 = ALLOCATE Int
	result_init_65 = CALL Int_init
	i_9 = result_58
	left_70 = GetAttr i_9 value 
	right_71 = GetAttr j_5 value 
	op_69 = left_70 = right_71
	result_68 = ALLOCATE Bool
	result_init_72 = CALL Bool_init
	IF result_68 GOTO label_40
	internal_73 = LOAD empty_str
	instance_74 = ALLOCATE String
	result_init_75 = CALL String_init
	result_67 = instance_74
	GOTO label_41
	LABEL label_40
	internal_76 = LOAD empty_str
	instance_77 = ALLOCATE String
	result_init_78 = CALL String_init
	SetAttr self rest instance_77
	result_67 = instance_77
	LABEL label_41
	result_30 = result_67
	GOTO label_42
	LABEL label_39
	result_89 = VCALL String length 
	left_87 = GetAttr result_89 value 
	right_88 = GetAttr i_9 value 
	op_86 = left_87 - right_88
	result_85 = ALLOCATE Int
	result_init_90 = CALL Int_init
	instance_91 = ALLOCATE Int
	value_92 = LOAD 1
	result_init_93 = CALL Int_init
	left_83 = GetAttr result_85 value 
	right_84 = GetAttr instance_91 value 
	op_82 = left_83 - right_84
	result_81 = ALLOCATE Int
	result_init_94 = CALL Int_init
	instance_99 = ALLOCATE Int
	value_100 = LOAD 1
	result_init_101 = CALL Int_init
	left_97 = GetAttr i_9 value 
	right_98 = GetAttr instance_99 value 
	op_96 = left_97 + right_98
	result_95 = ALLOCATE Int
	result_init_102 = CALL Int_init
	result_80 = VCALL String substr 
	SetAttr self rest result_80
	i_9 = j_5
	result_30 = j_5
	LABEL label_42
	result_21 = result_30
	GOTO label_43
	LABEL label_38
	result_114 = VCALL String length 
	left_112 = GetAttr result_114 value 
	right_113 = GetAttr i_9 value 
	op_111 = left_112 - right_113
	result_110 = ALLOCATE Int
	result_init_115 = CALL Int_init
	instance_116 = ALLOCATE Int
	value_117 = LOAD 1
	result_init_118 = CALL Int_init
	left_108 = GetAttr result_110 value 
	right_109 = GetAttr instance_116 value 
	op_107 = left_108 - right_109
	result_106 = ALLOCATE Int
	result_init_119 = CALL Int_init
	instance_124 = ALLOCATE Int
	value_125 = LOAD 1
	result_init_126 = CALL Int_init
	left_122 = GetAttr i_9 value 
	right_123 = GetAttr instance_124 value 
	op_121 = left_122 + right_123
	result_120 = ALLOCATE Int
	result_init_127 = CALL Int_init
	result_105 = VCALL String substr 
	SetAttr self rest result_105
	i_9 = j_5
	result_21 = j_5
	LABEL label_43
	let_result_130 = result_21
	GOTO label_35
	LABEL label_37
	result_10 = LOAD None
	let_result_131 = result_10
	let_result_132 = let_result_131
	let_result_133 = int_3
	
 RETURN let_result_133
}
function Main_init {
	PARAM self

	LOCAL result_0
	LOCAL result_1

	result_0 = CALL Parse_init
	
 RETURN 
	result_1 = VCALL Main read_input 
	SetAttr self g result_1
}
function Main.main {
	PARAM self

	LOCAL result_0
	LOCAL g_1
	LOCAL result_2
	LOCAL g_3

	g_1 = GetAttr self g 
	result_0 = VCALL Graph print_V 
	g_3 = GetAttr self g 
	result_2 = VCALL Graph print_E 
	
 RETURN result_2
}
function BoolOp_init {
	PARAM self

	LOCAL result_0

	result_0 = CALL Object_init
	
 RETURN 
}
function BoolOp.and {
	PARAM self
	PARAM b1
	PARAM b2

	LOCAL result_0
	LOCAL instance_1
	LOCAL value_2
	LOCAL result_init_3

	IF b1 GOTO label_44
	instance_1 = ALLOCATE Bool
	value_2 = LOAD 0
	result_init_3 = CALL Bool_init
	result_0 = instance_1
	GOTO label_45
	LABEL label_44
	result_0 = b2
	LABEL label_45
	
 RETURN result_0
}
function BoolOp.or {
	PARAM self
	PARAM b1
	PARAM b2

	LOCAL result_0
	LOCAL instance_1
	LOCAL value_2
	LOCAL result_init_3

	IF b1 GOTO label_46
	result_0 = b2
	GOTO label_47
	LABEL label_46
	instance_1 = ALLOCATE Bool
	value_2 = LOAD 0
	result_init_3 = CALL Bool_init
	result_0 = instance_1
	LABEL label_47
	
 RETURN result_0
}