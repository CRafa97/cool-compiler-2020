.data
buffer: .space 2048
strsubstrexception: .asciiz "Substring index exception"

string_1: .asciiz "2 is trivially prime.\n"
string_7: .asciiz " is prime.\n"
string_9: .asciiz "continue"
string_10: .asciiz "halt"
Object_INH:
String_INH:
.word Object_INH
Int_INH:
.word Object_INH
Bool_INH:
.word Object_INH
IO_INH:
.word Object_INH
SELF_TYPE_INH:
.word Object_INH
Main_INH:
.word IO_INH
Int_name: .asciiz "Int"
Int_VT:
.word Int_INH
Bool_name: .asciiz "Bool"
Bool_VT:
.word Bool_INH
String_name: .asciiz "String"
String_VT:
.word String_INH
.word String.length
.word String.concat
.word String.substr
Object_name: .asciiz "Object"
Object_VT:
.word Object_INH
.word Object.abort
.word Object.type_name
.word Object.copy
IO_name: .asciiz "IO"
IO_VT:
.word IO_INH
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
Main_name: .asciiz "Main"
Main_VT:
.word Main_INH
.word Main.main

.globl main
.text
IO.out_string:
sw $ra, 0($sp)
addiu $sp, $sp, -4
li $v0, 4
lw $a0, 8($sp)
syscall
jr $ra


IO.out_int:
sw $ra, 0($sp)
addiu $sp, $sp, -4
li $v0, 1
lw $a0, 8($sp)
syscall
jr $ra


IO.in_string:
move $fp, $sp
sw $ra, 0($sp)
addiu $sp, $sp, -4
la $a0, buffer
li $a1, 1024
li $v0, 8
syscall
sw $fp, 0($sp)
addiu $sp, $sp, -4
sw $a0, 0($sp)
addiu $sp, $sp, -4
jal String.length
addiu $a0, $a0, 1
li $v0, 9
syscall
move $t0, $v0
la $a0, buffer
istr_copy:
lb $t1, ($a0)
sb $t1, ($t0)
addiu $a0, $a0, 1
addiu $t0, $t0, 1
bne $t1, $zero, istr_copy
addiu $t0, $t0, -2
li $t1 10
lb $t2, ($t0)
bne $t1 , $t2 not_slash
sb $zero, ($t0)
not_slash:
move $a0, $v0
lw $ra, 0($fp)
addiu $sp, $sp, 12
lw $fp, 0($sp)
jr $ra 


IO.in_int:
move $fp, $sp
sw $ra, 0($sp)
addiu $sp, $sp, -4
lw $a0, 4($fp)
li $v0, 5
syscall
move $a0, $v0
lw $ra, 0($fp)
addiu $sp, $sp, 12
lw $fp, 0($sp)
jr $ra
Object.copy:
lw $a1, -4($sp)
lw $a0, -8($sp)
li $v0, 9
syscall
lw $a1, -4($sp)
lw $a0, 4($a1)
move $a3, $v0
_copy.loop:
lw $a2, 0($a1)
sw $a2, 0($a3)
addiu $a0, $a0, -1
addiu $a1, $a1, 4
addiu $a3, $a3, 4
beq $a0, $zero, _copy.end
j _copy.loop
_copy.end:
jr $ra


Object.abort:
li $v0, 10
syscall


String.length:
lw $a0, 4($sp)
_stringlength.loop:
lb $a1, 0($sp)
beqz $a1, _stringlength.end
addiu $a0, $a0, 1
j _stringlength.loop
_stringlength.end:
j Object.abort
lw $a1, 4($sp)
subu $v0, $a0, $a1
jr $ra


String.concat:
move $a2, $ra
jal String.length
move $v1, $v0
addiu $sp, $sp, -4
jal String.length
addiu $sp, $sp, 4
add $v1, $v1, $v0
addi $v1, $v1, 1
li $v0, 9
move $a0, $v1
syscall
move $v1, $v0
lw $a0, 0($sp)
_stringconcat.loop1:
lb $a1, 0($a0)
beqz $a1, _stringconcat.end1
sb $a1, 0($v1)
addiu $a0, $a0, 1
addiu $v1, $v1, 1
j _stringconcat.loop1
_stringconcat.end1:
lw $a0, -4($sp)
_stringconcat.loop2:
lb $a1, 0($a0)
beqz $a1, _stringconcat.end2
sb $a1, 0($v1)
addiu $a0, $a0, 1
addiu $v1, $v1, 1
j _stringconcat.loop2
_stringconcat.end2:
sb $zero, 0($v1)
move $ra, $a2
jr $ra

String.substr:
move $fp, $sp
sw $ra, 0($sp)
addiu $sp, $sp, -4
lw $a0, 12($fp)
addiu $a0, $a0, 1
li $v0, 9
syscall
move $t0, $v0
lw $s1, 4($fp)
lw $t1, 8($fp)
add $s1, $s1, $t1
lw $t1, 12($fp)
substr:
lb $t5, ($s1)
sb $t5, ($t0)
addiu $s1, $s1, 1
addiu $t0, $t0, 1
addiu $t1, $t1, -1
bne $t1, $zero, substr
sb $zero, ($t0)
move $a0, $v0
lw $ra, 0($fp)
addiu $sp, $sp, 20
lw $fp, 0($sp)
jr $ra 


_substrexception:
la $a0, strsubstrexception
li $v0, 4
syscall
li $v0, 10
syscall


_stringcmp:
move $fp, $sp
sw $ra, 0($sp)
addiu $sp, $sp, -4
lw $s1, 4($fp)
sw $fp, 0($sp)
addiu $sp, $sp, -4
sw $s1, 0($sp)
addiu $sp, $sp, -4
jal String.length

sw $a0, 0($sp)
addiu $sp, $sp, -4
lw $s1, 8($fp)
sw $fp, 0($sp)
addiu $sp, $sp, -4
sw $s1, 0($sp)
addiu $sp, $sp, -4
jal String.length
lw $t7, 4($sp)
addiu $sp, $sp, 4
bne $t7, $a0, str.not_equals_strings
lw $t7, 4($fp)
lw $a0, 8($fp)
str.equal_chart:
lb $t1, ($t7)
lb $t2, ($a0)
addiu $t7, $t7, 1
addiu $a0, $a0, 1
bne $t1, $t2, str.not_equals_strings
beq $t1, $zero, str.equals_strings
j str.equal_chart
str.not_equals_strings:
li $a0, 0
j str.end_equal_string
str.equals_strings:
li $a0, 1
str.end_equal_string:
lw $ra, 0($fp)
addiu $sp, $sp, 16
lw $fp, 0($sp)
jr $ra 
inherit:
beq $a0, $a1, inherit_true
beq $a0, $zero, inherit_false
lw $a0, ($a0)
j inherit
inherit_true:
li $v0, 1
jr $ra
inherit_false:
li $v0, 0
jr $ra

Object.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $v0, 4($sp)
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
jr $ra
Object.type_name:
sw $ra, 0($sp)
addiu $sp, $sp, -4
la $a1, Object_name
jr $ra
Int.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $v0, 4($sp)
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
jr $ra
Int.type_name:
sw $ra, 0($sp)
addiu $sp, $sp, -4
la $a1, Int_name
jr $ra
IO.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $v0, 4($sp)
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
jr $ra
IO.type_name:
sw $ra, 0($sp)
addiu $sp, $sp, -4
la $a1, IO_name
jr $ra
Bool.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $v0, 4($sp)
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
jr $ra
Bool.type_name:
sw $ra, 0($sp)
addiu $sp, $sp, -4
la $a1, Bool_name
jr $ra
String.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $v0, 4($sp)
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
jr $ra
String.type_name:
sw $ra, 0($sp)
addiu $sp, $sp, -4
la $a1, String_name
jr $ra
#--------------Initial Code---------------
main:
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $v0, 9
li $a0, 24
syscall
sw $v0, 4($sp)
la $a1, Main_VT
sw $a1, ($v0)
#DispatchParent in place
#obj 2 offset 1  result Main.Constructor
la $v0, 1
jal Main.Constructor
sw $a1, 0($sp)
addi $sp, $sp, -4
#Dispatch in place
#obj 3 offset 1  result Main.main
jal Main.main
sw $a1, 0($sp)
addi $sp, $sp, -4
j Object.abort
#--------------End Initial Code---------------
Main.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, -4
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
la $a0, string_1
sw $a0, 0($sp)
addi $sp, $sp, -4
#Dispatch in place
#obj 2 offset 5  result IO.out_string
jal IO.out_string
sw $a1, 0($sp)
addi $sp, $sp, -4
addiu $sp, $sp, 8
#Integer
li $a0, 2
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 4($sp)
sw $t0, 16($sp)
addiu $sp, $sp, 8
lw $t0, 4($sp)
lw $t1, 28($sp)
sw $t1, 4($sp)
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 32($sp)
lw $t1, 4($t0)
sw $t1, 4($sp)
lw $t0, 4($sp)
lw $t1, 32($sp)
sw $t1, 8($sp)
#Integer
li $a0, 500
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 4($sp)
lw $t1, 40($sp)
sw $t1, 16($sp)
#loop
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
_loop_2:
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 4($sp)
bnez $t0, _body_2
j _pool_2
_body_2:
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
#Assignment
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 68($sp)
lw $t1, 8($t0)
sw $t1, 4($sp)
#Integer
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 4($sp)
lw $t1, 4($sp)
add $t0, $t0, $t1
sw $t0, 12($sp)
addiu $sp, $sp, 8
lw $t0, 4($sp)
lw $t1, 80($sp)
sw $t1, 8($sp)
#Assignment
#Integer
li $a0, 2
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 4($sp)
lw $t1, 84($sp)
sw $t1, 12($sp)
#loop
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
_loop_3:
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 104($sp)
lw $t1, 8($t0)
sw $t1, 4($sp)
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 112($sp)
lw $t1, 12($t0)
sw $t1, 4($sp)
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 116($sp)
lw $t1, 12($t0)
sw $t1, 4($sp)
lw $t0, 4($sp)
lw $t1, 4($sp)
mult $t0, $t1
mflo $t0
sw $t0, 12($sp)
addiu $sp, $sp, 8
lw $t0, 4($sp)
lw $t1, 8($sp)
li $t3, 1
add $t0, $t0, $t3
sge $t0, $t1, $t0
sw $t0, 28($sp)
addiu $sp, $sp, 8
lw $t0, 4($sp)
bnez $t0, _if_4
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 144($sp)
lw $t1, 8($t0)
sw $t1, 4($sp)
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 152($sp)
lw $t1, 12($t0)
sw $t1, 4($sp)
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 160($sp)
lw $t1, 8($t0)
sw $t1, 4($sp)
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 164($sp)
lw $t1, 12($t0)
sw $t1, 4($sp)
lw $t0, 4($sp)
lw $t1, 4($sp)
div $t0, $t1
mflo $t0
sw $t0, 12($sp)
addiu $sp, $sp, 8
lw $t0, 4($sp)
lw $t1, 8($sp)
mult $t0, $t1
mflo $t0
sw $t0, 28($sp)
addiu $sp, $sp, 8
lw $t0, 4($sp)
lw $t1, 8($sp)
sub $t0, $t0, $t1
sw $t0, 40($sp)
addiu $sp, $sp, 8
#Integer
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 8($sp)
lw $t1, 4($sp)
seq $t0, $t0, $t1
sw $t0, 52($sp)
addiu $sp, $sp, 8
lw $t0, 4($sp)
bnez $t0, _if_5
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 4($sp)
sw $t0, 64($sp)
j _fi_5
_if_5:
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 4($sp)
sw $t0, 72($sp)
_fi_5:
addiu $sp, $sp, 8
lw $t0, 4($sp)
sw $t0, 112($sp)
j _fi_4
_if_4:
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 4($sp)
sw $t0, 116($sp)
_fi_4:
addiu $sp, $sp, 8
lw $t0, 4($sp)
bnez $t0, _body_3
j _pool_3
_body_3:
#Assignment
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 220($sp)
lw $t1, 12($t0)
sw $t1, 4($sp)
#Integer
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 4($sp)
lw $t1, 4($sp)
add $t0, $t0, $t1
sw $t0, 12($sp)
addiu $sp, $sp, 8
lw $t0, 4($sp)
lw $t1, 232($sp)
sw $t1, 12($sp)
addiu $sp, $sp, 8
j _loop_3
_pool_3:
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 244($sp)
lw $t1, 8($t0)
sw $t1, 4($sp)
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 252($sp)
lw $t1, 12($t0)
sw $t1, 4($sp)
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 256($sp)
lw $t1, 12($t0)
sw $t1, 4($sp)
lw $t0, 4($sp)
lw $t1, 4($sp)
mult $t0, $t1
mflo $t0
sw $t0, 12($sp)
addiu $sp, $sp, 8
lw $t0, 4($sp)
lw $t1, 8($sp)
li $t3, 1
add $t0, $t0, $t3
sge $t0, $t1, $t0
sw $t0, 28($sp)
addiu $sp, $sp, 8
lw $t0, 4($sp)
bnez $t0, _if_6
#Integer
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 4($sp)
sw $t0, 40($sp)
j _fi_6
_if_6:
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
#Assignment
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 284($sp)
lw $t1, 8($t0)
sw $t1, 4($sp)
lw $t0, 4($sp)
lw $t1, 284($sp)
sw $t1, 4($sp)
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 296($sp)
lw $t1, 4($t0)
sw $t1, 4($sp)
#Dispatch in place
#obj 2 offset 74  result IO.out_int
jal IO.out_int
sw $a1, 0($sp)
addi $sp, $sp, -4
addiu $sp, $sp, 8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
la $a0, string_7
sw $a0, 0($sp)
addi $sp, $sp, -4
#Dispatch in place
#obj 2 offset 76  result IO.out_string
jal IO.out_string
sw $a1, 0($sp)
addi $sp, $sp, -4
addiu $sp, $sp, 8
lw $t0, 4($sp)
sw $t0, 28($sp)
addiu $sp, $sp, 12
lw $t0, 4($sp)
sw $t0, 76($sp)
_fi_6:
addiu $sp, $sp, 8
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 320($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 324($sp)
lw $t1, 8($t0)
sw $t1, 4($sp)
lw $t0, 4($sp)
lw $t1, 4($sp)
add $t0, $t1, $t0
sw $t0, 12($sp)
addiu $sp, $sp, 8
lw $t0, 4($sp)
bnez $t0, _if_8
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
la $a0, string_9
sw $a0, 0($sp)
addi $sp, $sp, -4
lw $t0, 4($sp)
sw $t0, 28($sp)
j _fi_8
_if_8:
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
#push object
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
la $a0, string_10
sw $a0, 0($sp)
addi $sp, $sp, -4
#Dispatch in place
#obj 2 offset 1  result Object.abort
jal Object.abort
sw $a1, 0($sp)
addi $sp, $sp, -4
addiu $sp, $sp, 4
lw $t0, 4($sp)
sw $t0, 44($sp)
_fi_8:
addiu $sp, $sp, 8
lw $t0, 4($sp)
sw $t0, 296($sp)
addiu $sp, $sp, 20
addiu $sp, $sp, 8
j _loop_2
_pool_2:
lw $t0, 4($sp)
lw $t1, 352($sp)
sw $t1, 20($sp)
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $v0, 4($sp)
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
jr $ra
Main.type_name:
sw $ra, 0($sp)
addiu $sp, $sp, -4
la $a1, Main_name
jr $ra
Main.main:
sw $ra, 0($sp)
addiu $sp, $sp, -4
#Integer
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $v0, 10
syscall
