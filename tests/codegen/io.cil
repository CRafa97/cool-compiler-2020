.TYPES
type Object {
	

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
}
type Int {
	attribute value

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
}
type String {
	attribute value

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method length : String.length
	method concat : String.concat
	method substr : String.substr
}
type Bool {
	attribute value

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
}
type IO {
	

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method out_string : IO.out_string
	method out_int : IO.out_int
	method in_string : IO.in_string
	method in_int : IO.in_int
}
type A {
	attribute io

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method out_a : A.out_a
}
type B {
	attribute io

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method out_a : A.out_a
	method out_b : B.out_b
}
type C {
	

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method out_string : IO.out_string
	method out_int : IO.out_int
	method in_string : IO.in_string
	method in_int : IO.in_int
	method out_c : C.out_c
}
type D {
	

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method out_string : IO.out_string
	method out_int : IO.out_int
	method in_string : IO.in_string
	method in_int : IO.in_int
	method out_c : C.out_c
	method out_d : D.out_d
}
type Main {
	

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method out_string : IO.out_string
	method out_int : IO.out_int
	method in_string : IO.in_string
	method in_int : IO.in_int
	method main : Main.main
}

.DATA
s_0: Abort called from class 
s_1: 

empty_str: 
s_3: A: Hello world

s_4: B: Hello world

s_5: C: Hello world

s_6: D: Hello world

s_7: Done.


.CODE
function main {
	

	LOCAL instance_0
	LOCAL result_1

	instance_0 = ALLOCATE Main
	result_1 = CALL Main_init
	result_1 = CALL Main.main
	
 RETURN 
}
function Object_init {
	PARAM self

	

	
 RETURN 
}
function Object.abort {
	PARAM self

	LOCAL msg_0
	LOCAL type_name_1
	LOCAL eol_2

	msg_0 = LOAD s_0
	PRINT msg_0
	type_name_1 = TYPEOF self
	PRINT type_name_1
	eol_2 = LOAD s_1
	PRINT eol_2
	HALT
}
function Object.type_name {
	PARAM self

	LOCAL type_name_0
	LOCAL instance_1
	LOCAL result_init_2

	type_name_0 = TYPEOF self
	instance_1 = ALLOCATE String
	result_init_2 = CALL String_init
	
 RETURN instance_1
}
function Object.copy {
	PARAM self

	LOCAL copy_0

	copy_0 = COPY self
	
 RETURN copy_0
}
function IO_init {
	PARAM self

	

	
 RETURN 
}
function IO.out_string {
	PARAM self
	PARAM x

	LOCAL v_0

	v_0 = GetAttr x value 
	PRINT v_0
	
 RETURN self
}
function IO.out_int {
	PARAM self
	PARAM x

	LOCAL v_0

	v_0 = GetAttr x value 
	PRINT v_0
	
 RETURN self
}
function IO.in_string {
	PARAM self

	LOCAL read_str_0
	LOCAL instance_1
	LOCAL result_init_2

	read_str_0 = READ
	instance_1 = ALLOCATE String
	result_init_2 = CALL String_init
	
 RETURN instance_1
}
function IO.in_int {
	PARAM self

	LOCAL read_int_0
	LOCAL instance_1
	LOCAL result_init_2

	read_int_0 = READ
	instance_1 = ALLOCATE Int
	result_init_2 = CALL Int_init
	
 RETURN instance_1
}
function String_init {
	PARAM self
	PARAM v

	

	SetAttr self value v
	
 RETURN 
}
function String.length {
	PARAM self

	LOCAL length_0
	LOCAL instance_1
	LOCAL result_init_2

	length_0 = LENGTH self
	instance_1 = ALLOCATE Int
	result_init_2 = CALL Int_init
	
 RETURN instance_1
}
function String.concat {
	PARAM self
	PARAM s

	LOCAL str1_0
	LOCAL len1_1
	LOCAL str2_2
	LOCAL len2_3
	LOCAL local_len1_4
	LOCAL local_len2_5
	LOCAL concat_6
	LOCAL instance_7
	LOCAL result_init_8

	str1_0 = GetAttr self value 
	len1_1 = CALL String.length
	str2_2 = GetAttr s value 
	len2_3 = CALL String.length
	local_len1_4 = GetAttr len1_1 value 
	local_len2_5 = GetAttr len2_3 value 
	concat_6 = CONCAT str1_0  str2_2
	instance_7 = ALLOCATE String
	result_init_8 = CALL String_init
	
 RETURN instance_7
}
function String.substr {
	PARAM self
	PARAM i
	PARAM l

	LOCAL i_value_0
	LOCAL l_value_1
	LOCAL subs_result_2
	LOCAL instance_3
	LOCAL result_init_4

	i_value_0 = GetAttr i value 
	l_value_1 = GetAttr l value 
	subs_result_2 = SUBSTR i_value_0  l_value_1  self
	instance_3 = ALLOCATE String
	result_init_4 = CALL String_init
	
 RETURN instance_3
}
function Bool_init {
	PARAM self
	PARAM v

	

	SetAttr self value v
	
 RETURN 
}
function Int_init {
	PARAM self
	PARAM v

	

	SetAttr self value v
	
 RETURN 
}
function String_equals {
	PARAM str1
	PARAM str2

	LOCAL str1_0
	LOCAL str2_1
	LOCAL comparison_result_2

	str1_0 = GetAttr str1 value 
	str2_1 = GetAttr str2 value 
	comparison_result_2 = str1_0 = str2_1
	
 RETURN comparison_result_2
}
function A_init {
	PARAM self

	LOCAL result_0
	LOCAL result_1
	LOCAL init_2

	result_0 = CALL Object_init
	
 RETURN 
	result_1 = ALLOCATE IO
	init_2 = CALL IO_init
	SetAttr self io result_1
}
function A.out_a {
	PARAM self

	LOCAL result_0
	LOCAL A.io
	LOCAL internal_2
	LOCAL instance_3
	LOCAL result_init_4

	A.io = GetAttr self io 
	internal_2 = LOAD s_3
	instance_3 = ALLOCATE String
	result_init_4 = CALL String_init
	result_0 = VCALL IO out_string 
	
 RETURN result_0
}
function B_init {
	PARAM self

	LOCAL result_0

	result_0 = CALL A_init
	
 RETURN 
}
function B.out_b {
	PARAM self

	LOCAL result_0
	LOCAL B.io
	LOCAL internal_2
	LOCAL instance_3
	LOCAL result_init_4

	B.io = GetAttr self io 
	internal_2 = LOAD s_4
	instance_3 = ALLOCATE String
	result_init_4 = CALL String_init
	result_0 = VCALL IO out_string 
	
 RETURN result_0
}
function C_init {
	PARAM self

	LOCAL result_0

	result_0 = CALL IO_init
	
 RETURN 
}
function C.out_c {
	PARAM self

	LOCAL result_0
	LOCAL internal_1
	LOCAL instance_2
	LOCAL result_init_3

	internal_1 = LOAD s_5
	instance_2 = ALLOCATE String
	result_init_3 = CALL String_init
	result_0 = VCALL C out_string 
	
 RETURN result_0
}
function D_init {
	PARAM self

	LOCAL result_0

	result_0 = CALL C_init
	
 RETURN 
}
function D.out_d {
	PARAM self

	LOCAL result_0
	LOCAL internal_1
	LOCAL instance_2
	LOCAL result_init_3

	internal_1 = LOAD s_6
	instance_2 = ALLOCATE String
	result_init_3 = CALL String_init
	result_0 = VCALL D out_string 
	
 RETURN result_0
}
function Main_init {
	PARAM self

	LOCAL result_0

	result_0 = CALL IO_init
	
 RETURN 
}
function Main.main {
	PARAM self

	LOCAL result_0
	LOCAL result_1
	LOCAL init_2
	LOCAL result_3
	LOCAL result_4
	LOCAL init_5
	LOCAL result_6
	LOCAL result_7
	LOCAL init_8
	LOCAL result_9
	LOCAL result_10
	LOCAL init_11
	LOCAL result_12
	LOCAL internal_13
	LOCAL instance_14
	LOCAL result_init_15

	result_1 = ALLOCATE A
	init_2 = CALL A_init
	result_0 = VCALL A out_a 
	result_4 = ALLOCATE B
	init_5 = CALL B_init
	result_3 = VCALL B out_b 
	result_7 = ALLOCATE C
	init_8 = CALL C_init
	result_6 = VCALL C out_c 
	result_10 = ALLOCATE D
	init_11 = CALL D_init
	result_9 = VCALL D out_d 
	internal_13 = LOAD s_7
	instance_14 = ALLOCATE String
	result_init_15 = CALL String_init
	result_12 = VCALL Main out_string 
	
 RETURN result_12
}