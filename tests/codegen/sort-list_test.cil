.TYPES
type Object {
	

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
}
type Int {
	attribute value

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
}
type String {
	attribute value

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method length : String.length
	method concat : String.concat
	method substr : String.substr
}
type Bool {
	attribute value

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
}
type IO {
	

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method out_string : IO.out_string
	method out_int : IO.out_int
	method in_string : IO.in_string
	method in_int : IO.in_int
}
type List {
	

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method out_string : IO.out_string
	method out_int : IO.out_int
	method in_string : IO.in_string
	method in_int : IO.in_int
	method isNil : List.isNil
	method cons : List.cons
	method car : List.car
	method cdr : List.cdr
	method rev : List.rev
	method sort : List.sort
	method insert : List.insert
	method rcons : List.rcons
	method print_list : List.print_list
}
type Cons {
	attribute xcar
	attribute xcdr

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method out_string : IO.out_string
	method out_int : IO.out_int
	method in_string : IO.in_string
	method in_int : IO.in_int
	method isNil : Cons.isNil
	method cons : List.cons
	method car : Cons.car
	method cdr : Cons.cdr
	method rev : Cons.rev
	method sort : Cons.sort
	method insert : Cons.insert
	method rcons : Cons.rcons
	method print_list : Cons.print_list
	method init : Cons.init
}
type Nil {
	

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method out_string : IO.out_string
	method out_int : IO.out_int
	method in_string : IO.in_string
	method in_int : IO.in_int
	method isNil : Nil.isNil
	method cons : List.cons
	method car : List.car
	method cdr : List.cdr
	method rev : Nil.rev
	method sort : Nil.sort
	method insert : Nil.insert
	method rcons : Nil.rcons
	method print_list : Nil.print_list
}
type Main {
	attribute l

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method out_string : IO.out_string
	method out_int : IO.out_int
	method in_string : IO.in_string
	method in_int : IO.in_int
	method iota : Main.iota
	method main : Main.main
}

.DATA
s_0: Abort called from class 
s_1: 

empty_str: 
s_3: \n
s_4: How many numbers to sort? 

.CODE
function main {
	

	LOCAL instance_0
	LOCAL result_1

	instance_0 = ALLOCATE Main
	result_1 = CALL Main_init
	result_1 = CALL Main.main
	
 RETURN 
}
function Object_init {
	PARAM self

	

	
 RETURN 
}
function Object.abort {
	PARAM self

	LOCAL msg_0
	LOCAL type_name_1
	LOCAL eol_2

	msg_0 = LOAD s_0
	PRINT_STR msg_0
	type_name_1 = TYPEOF self
	PRINT_STR type_name_1
	eol_2 = LOAD s_1
	PRINT_STR eol_2
	HALT
}
function Object.type_name {
	PARAM self

	LOCAL type_name_0
	LOCAL instance_1
	LOCAL result_init_2

	type_name_0 = TYPEOF self
	instance_1 = ALLOCATE String
	result_init_2 = CALL String_init
	
 RETURN instance_1
}
function Object.copy {
	PARAM self

	LOCAL copy_0

	copy_0 = COPY self
	
 RETURN copy_0
}
function IO_init {
	PARAM self

	

	
 RETURN 
}
function IO.out_string {
	PARAM self
	PARAM x

	LOCAL v_0

	v_0 = GetAttr x value 
	PRINT_STR v_0
	
 RETURN self
}
function IO.out_int {
	PARAM self
	PARAM x

	LOCAL v_0

	v_0 = GetAttr x value 
	PRINT_INT v_0
	
 RETURN self
}
function IO.in_string {
	PARAM self

	LOCAL read_str_0
	LOCAL instance_1
	LOCAL result_init_2

	read_str_0 = READ STR
	instance_1 = ALLOCATE String
	result_init_2 = CALL String_init
	
 RETURN instance_1
}
function IO.in_int {
	PARAM self

	LOCAL read_int_0
	LOCAL instance_1
	LOCAL result_init_2

	read_int_0 = READ INT
	instance_1 = ALLOCATE Int
	result_init_2 = CALL Int_init
	
 RETURN instance_1
}
function String_init {
	PARAM self
	PARAM v

	

	SetAttr self value v
	
 RETURN 
}
function String.length {
	PARAM self

	LOCAL length_0
	LOCAL instance_1
	LOCAL result_init_2

	length_0 = LENGTH self
	instance_1 = ALLOCATE Int
	result_init_2 = CALL Int_init
	
 RETURN instance_1
}
function String.concat {
	PARAM self
	PARAM s

	LOCAL str1_0
	LOCAL len1_1
	LOCAL str2_2
	LOCAL len2_3
	LOCAL local_len1_4
	LOCAL local_len2_5
	LOCAL concat_6
	LOCAL instance_7
	LOCAL result_init_8

	str1_0 = GetAttr self value 
	len1_1 = CALL String.length
	str2_2 = GetAttr s value 
	len2_3 = CALL String.length
	local_len1_4 = GetAttr len1_1 value 
	local_len2_5 = GetAttr len2_3 value 
	concat_6 = CONCAT str1_0  str2_2
	instance_7 = ALLOCATE String
	result_init_8 = CALL String_init
	
 RETURN instance_7
}
function String.substr {
	PARAM self
	PARAM i
	PARAM l

	LOCAL i_value_0
	LOCAL l_value_1
	LOCAL subs_result_2
	LOCAL instance_3
	LOCAL result_init_4

	i_value_0 = GetAttr i value 
	l_value_1 = GetAttr l value 
	subs_result_2 = SUBSTR i_value_0  l_value_1  self
	instance_3 = ALLOCATE String
	result_init_4 = CALL String_init
	
 RETURN instance_3
}
function Bool_init {
	PARAM self
	PARAM v

	

	SetAttr self value v
	
 RETURN 
}
function Int_init {
	PARAM self
	PARAM v

	

	SetAttr self value v
	
 RETURN 
}
function String_equals {
	PARAM str1
	PARAM str2

	LOCAL str1_0
	LOCAL str2_1
	LOCAL comparison_result_2

	str1_0 = GetAttr str1 value 
	str2_1 = GetAttr str2 value 
	comparison_result_2 = str1_0 = str2_1
	
 RETURN comparison_result_2
}
function List_init {
	PARAM self

	LOCAL result_0

	result_0 = CALL IO_init
	
 RETURN 
}
function List.isNil {
	PARAM self

	LOCAL result_0
	LOCAL instance_1
	LOCAL value_2
	LOCAL result_init_3

	result_0 = VCALL List abort 
	instance_1 = ALLOCATE Bool
	value_2 = LOAD 0
	result_init_3 = CALL Bool_init
	
 RETURN instance_1
}
function List.cons {
	PARAM self
	PARAM hd

	LOCAL result_0
	LOCAL init_1
	LOCAL new_cell_2
	LOCAL result_3
	LOCAL let_result_4

	result_0 = ALLOCATE Cons
	init_1 = CALL Cons_init
	new_cell_2 = result_0
	result_3 = VCALL Cons init 
	let_result_4 = result_3
	
 RETURN let_result_4
}
function List.car {
	PARAM self

	LOCAL result_0
	LOCAL result_1
	LOCAL init_2

	result_0 = VCALL List abort 
	result_1 = ALLOCATE Int
	init_2 = CALL Int_init
	
 RETURN result_1
}
function List.cdr {
	PARAM self

	LOCAL result_0
	LOCAL result_1
	LOCAL init_2

	result_0 = VCALL List abort 
	result_1 = ALLOCATE List
	init_2 = CALL List_init
	
 RETURN result_1
}
function List.rev {
	PARAM self

	LOCAL result_0

	result_0 = VCALL List cdr 
	
 RETURN result_0
}
function List.sort {
	PARAM self

	LOCAL result_0

	result_0 = VCALL List cdr 
	
 RETURN result_0
}
function List.insert {
	PARAM self
	PARAM i

	LOCAL result_0

	result_0 = VCALL List cdr 
	
 RETURN result_0
}
function List.rcons {
	PARAM self
	PARAM i

	LOCAL result_0

	result_0 = VCALL List cdr 
	
 RETURN result_0
}
function List.print_list {
	PARAM self

	LOCAL result_0

	result_0 = VCALL List abort 
	
 RETURN result_0
}
function Cons_init {
	PARAM self

	LOCAL result_0
	LOCAL instance_1
	LOCAL value_2
	LOCAL result_init_3

	result_0 = CALL List_init
	
 RETURN 
	instance_1 = ALLOCATE Int
	value_2 = LOAD 0
	result_init_3 = CALL Int_init
	SetAttr self xcar instance_1
	SetAttr self xcdr None
}
function Cons.isNil {
	PARAM self

	LOCAL instance_0
	LOCAL value_1
	LOCAL result_init_2

	instance_0 = ALLOCATE Bool
	value_1 = LOAD 0
	result_init_2 = CALL Bool_init
	
 RETURN instance_0
}
function Cons.init {
	PARAM self
	PARAM hd
	PARAM tl

	LOCAL result_0
	LOCAL result_1

	SetAttr self xcar hd
	SetAttr self xcdr tl
	
 RETURN self
}
function Cons.car {
	PARAM self

	LOCAL xcar_0

	xcar_0 = GetAttr self xcar 
	
 RETURN xcar_0
}
function Cons.cdr {
	PARAM self

	LOCAL xcdr_0

	xcdr_0 = GetAttr self xcdr 
	
 RETURN xcdr_0
}
function Cons.rev {
	PARAM self

	LOCAL result_0
	LOCAL result_1
	LOCAL xcdr_2
	LOCAL xcar_3

	xcdr_2 = GetAttr self xcdr 
	result_1 = VCALL List rev 
	xcar_3 = GetAttr self xcar 
	result_0 = VCALL List rcons 
	
 RETURN result_0
}
function Cons.sort {
	PARAM self

	LOCAL result_0
	LOCAL result_1
	LOCAL xcdr_2
	LOCAL xcar_3

	xcdr_2 = GetAttr self xcdr 
	result_1 = VCALL List sort 
	xcar_3 = GetAttr self xcar 
	result_0 = VCALL List insert 
	
 RETURN result_0
}
function Cons.insert {
	PARAM self
	PARAM i

	LOCAL result_0
	LOCAL result_1
	LOCAL op_2
	LOCAL left_3
	LOCAL right_4
	LOCAL xcar_5
	LOCAL result_init_6
	LOCAL result_7
	LOCAL result_8
	LOCAL init_9
	LOCAL result_10
	LOCAL xcdr_11
	LOCAL xcar_12
	LOCAL result_13
	LOCAL result_14
	LOCAL init_15

	xcar_5 = GetAttr self xcar 
	left_3 = GetAttr i value 
	right_4 = GetAttr xcar_5 value 
	op_2 = left_3 < right_4
	result_1 = ALLOCATE Bool
	result_init_6 = CALL Bool_init
	IF result_1 GOTO label_1
	result_8 = ALLOCATE Cons
	init_9 = CALL Cons_init
	xcdr_11 = GetAttr self xcdr 
	result_10 = VCALL List insert 
	xcar_12 = GetAttr self xcar 
	result_7 = VCALL Cons init 
	result_0 = result_7
	GOTO label_2
	LABEL label_1
	result_14 = ALLOCATE Cons
	init_15 = CALL Cons_init
	result_13 = VCALL Cons init 
	result_0 = result_13
	LABEL label_2
	
 RETURN result_0
}
function Cons.rcons {
	PARAM self
	PARAM i

	LOCAL result_0
	LOCAL result_1
	LOCAL init_2
	LOCAL result_3
	LOCAL xcdr_4
	LOCAL xcar_5

	result_1 = ALLOCATE Cons
	init_2 = CALL Cons_init
	xcdr_4 = GetAttr self xcdr 
	result_3 = VCALL List rcons 
	xcar_5 = GetAttr self xcar 
	result_0 = VCALL Cons init 
	
 RETURN result_0
}
function Cons.print_list {
	PARAM self

	LOCAL result_0
	LOCAL xcar_1
	LOCAL result_2
	LOCAL internal_3
	LOCAL instance_4
	LOCAL result_init_5
	LOCAL result_6
	LOCAL xcdr_7

	xcar_1 = GetAttr self xcar 
	result_0 = VCALL Cons out_int 
	internal_3 = LOAD s_3
	instance_4 = ALLOCATE String
	result_init_5 = CALL String_init
	result_2 = VCALL Cons out_string 
	xcdr_7 = GetAttr self xcdr 
	result_6 = VCALL List print_list 
	
 RETURN result_6
}
function Nil_init {
	PARAM self

	LOCAL result_0

	result_0 = CALL List_init
	
 RETURN 
}
function Nil.isNil {
	PARAM self

	LOCAL instance_0
	LOCAL value_1
	LOCAL result_init_2

	instance_0 = ALLOCATE Bool
	value_1 = LOAD 0
	result_init_2 = CALL Bool_init
	
 RETURN instance_0
}
function Nil.rev {
	PARAM self

	

	
 RETURN self
}
function Nil.sort {
	PARAM self

	

	
 RETURN self
}
function Nil.insert {
	PARAM self
	PARAM i

	LOCAL result_0

	result_0 = VCALL Nil rcons 
	
 RETURN result_0
}
function Nil.rcons {
	PARAM self
	PARAM i

	LOCAL result_0
	LOCAL result_1
	LOCAL init_2

	result_1 = ALLOCATE Cons
	init_2 = CALL Cons_init
	result_0 = VCALL Cons init 
	
 RETURN result_0
}
function Nil.print_list {
	PARAM self

	LOCAL instance_0
	LOCAL value_1
	LOCAL result_init_2

	instance_0 = ALLOCATE Bool
	value_1 = LOAD 0
	result_init_2 = CALL Bool_init
	
 RETURN instance_0
}
function Main_init {
	PARAM self

	LOCAL result_0

	result_0 = CALL IO_init
	
 RETURN 
	SetAttr self l None
}
function Main.iota {
	PARAM self
	PARAM i

	LOCAL result_0
	LOCAL init_1
	LOCAL result_2
	LOCAL instance_3
	LOCAL value_4
	LOCAL result_init_5
	LOCAL j_6
	LOCAL result_7
	LOCAL result_8
	LOCAL op_9
	LOCAL left_10
	LOCAL right_11
	LOCAL result_init_12
	LOCAL result_13
	LOCAL result_14
	LOCAL init_15
	LOCAL l_16
	LOCAL result_17
	LOCAL result_18
	LOCAL op_19
	LOCAL left_20
	LOCAL right_21
	LOCAL instance_22
	LOCAL value_23
	LOCAL result_init_24
	LOCAL result_init_25
	LOCAL result_26
	LOCAL let_result_27
	LOCAL l_28

	result_0 = ALLOCATE Nil
	init_1 = CALL Nil_init
	SetAttr self l result_0
	instance_3 = ALLOCATE Int
	value_4 = LOAD 0
	result_init_5 = CALL Int_init
	j_6 = instance_3
	LABEL label_3
	left_10 = GetAttr j_6 value 
	right_11 = GetAttr i value 
	op_9 = left_10 < right_11
	result_8 = ALLOCATE Bool
	result_init_12 = CALL Bool_init
	IF result_8 GOTO label_4
	GOTO label_5
	LABEL label_4
	result_14 = ALLOCATE Cons
	init_15 = CALL Cons_init
	l_16 = GetAttr self l 
	result_13 = VCALL Cons init 
	SetAttr self l result_13
	instance_22 = ALLOCATE Int
	value_23 = LOAD 1
	result_init_24 = CALL Int_init
	left_20 = GetAttr j_6 value 
	right_21 = GetAttr instance_22 value 
	op_19 = left_20 + right_21
	result_18 = ALLOCATE Int
	result_init_25 = CALL Int_init
	j_6 = result_18
	GOTO label_3
	LABEL label_5
	result_7 = LOAD None
	let_result_27 = result_7
	l_28 = GetAttr self l 
	
 RETURN l_28
}
function Main.main {
	PARAM self

	LOCAL result_0
	LOCAL internal_1
	LOCAL instance_2
	LOCAL result_init_3
	LOCAL result_4
	LOCAL result_5
	LOCAL result_6
	LOCAL result_7
	LOCAL result_8

	internal_1 = LOAD s_4
	instance_2 = ALLOCATE String
	result_init_3 = CALL String_init
	result_0 = VCALL Main out_string 
	result_8 = VCALL Main in_int 
	result_7 = VCALL Main iota 
	result_6 = VCALL List rev 
	result_5 = VCALL List sort 
	result_4 = VCALL List print_list 
	
 RETURN result_4
}