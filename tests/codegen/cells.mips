.data
buffer: .space 80
strsubstrexception: .asciiz "Substring index exception"

string_1: .asciiz "\n"
string_4: .asciiz "X"
string_6: .asciiz "X"
string_8: .asciiz "X"
string_11: .asciiz "."
string_12: .asciiz "X"
string_14: .asciiz "         X         "
Object_INH:
String_INH:
.word Object_INH
Int_INH:
.word Object_INH
Bool_INH:
.word Object_INH
IO_INH:
.word Object_INH
SELF_TYPE_INH:
.word Object_INH
CellularAutomaton_INH:
.word IO_INH
Main_INH:
.word Object_INH
String_VT:
.word String_INH
.word String.length
.word String.concat
.word String.substr
Object_VT:
.word Object_INH
.word Object.abort
.word Object.type_name
.word Object.copy
IO_VT:
.word IO_INH
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
CellularAutomaton_VT:
.word CellularAutomaton_INH
.word CellularAutomaton.init
.word CellularAutomaton.print
.word CellularAutomaton.num_cells
.word CellularAutomaton.cell
.word CellularAutomaton.cell_left_neighbor
.word CellularAutomaton.cell_right_neighbor
.word CellularAutomaton.cell_at_next_evolution
.word CellularAutomaton.evolve
Main_VT:
.word Main_INH
.word Main.main

.globl main
.text
IO.out_string:
li $v0, 4
syscall
jr $ra


IO.out_int:
li $v0, 1
lw $a0, -4($sp)
syscall
jr $ra


IO.in_string:
move $a3, $ra
la $a0, buffer
li $a1, 65536
li $v0, 8
syscall
addiu $sp, $sp, -4
sw $a0, 0($sp)
jal String.length
addiu $sp, $sp, 4
move $a2, $v0
addiu $a2, $a2, -1
move $a0, $v0
li $v0, 9
syscall
move $v1, $v0
la $a0, buffer
_in_string.loop:
beqz $a2, _in_string.end
lb $a1, 0($a0)
sb $a1, 0($v1)
addiu $a0, $a0, 1
addiu $v1, $v1, 1
addiu $a2, $a2, -1
j _in_string.loop
_in_string.end:
sb $zero, 0($v1)
move $ra, $a3
jr $ra


IO.in_int:
li $v0, 5
syscall
jr $ra
Object.copy:
lw $a1, -4($sp)
lw $a0, -8($sp)
li $v0, 9
syscall
lw $a1, -4($sp)
lw $a0, 4($a1)
move $a3, $v0
_copy.loop:
lw $a2, 0($a1)
sw $a2, 0($a3)
addiu $a0, $a0, -1
addiu $a1, $a1, 4
addiu $a3, $a3, 4
beq $a0, $zero, _copy.end
j _copy.loop
_copy.end:
jr $ra


Object.abort:
li $v0, 10
syscall

Object.type_name:


String.length:
lw $a0, -4($sp)
_stringlength.loop:
lb $a1, 0($a0)
beqz $a1, _stringlength.end
addiu $a0, $a0, 1
j _stringlength.loop
_stringlength.end:
lw $a1, -4($sp)
subu $v0, $a0, $a1
jr $ra


String.concat:
move $a2, $ra
jal String.length
move $v1, $v0
addiu $sp, $sp, -4
jal String.length
addiu $sp, $sp, 4
add $v1, $v1, $v0
addi $v1, $v1, 1
li $v0, 9
move $a0, $v1
syscall
move $v1, $v0
lw $a0, 0($sp)
_stringconcat.loop1:
lb $a1, 0($a0)
beqz $a1, _stringconcat.end1
sb $a1, 0($v1)
addiu $a0, $a0, 1
addiu $v1, $v1, 1
j _stringconcat.loop1
_stringconcat.end1:
lw $a0, -4($sp)
_stringconcat.loop2:
lb $a1, 0($a0)
beqz $a1, _stringconcat.end2
sb $a1, 0($v1)
addiu $a0, $a0, 1
addiu $v1, $v1, 1
j _stringconcat.loop2
_stringconcat.end2:
sb $zero, 0($v1)
move $ra, $a2
jr $ra

String.substr:
lw $a0, -12($sp)
addiu $a0, $a0, 1
li $v0, 9
syscall
move $v1, $v0
lw $a0, -4($sp)
lw $a1, -8($sp)
add $a0, $a0, $a1
lw $a2, -12($sp)
_stringsubstr.loop:
beqz $a2, _stringsubstr.end
lb $a1, 0($a0)
beqz $a1, _substrexception
sb $a1, 0($v1)
addiu $a0, $a0, 1
addiu $v1, $v1, 1
addiu $a2, $a2, -1
j _stringsubstr.loop
_stringsubstr.end:
sb $zero, 0($v1)
jr $ra


_substrexception:
la $a0, strsubstrexception
li $v0, 4
syscall
li $v0, 10
syscall


_stringcmp:
li $v0, 1
_stringcmp.loop:
lb $a2, 0($a0)
lb $a3, 0($a1)
beqz $a2, _stringcmp.end
beq $a2, $zero, _stringcmp.end
beq $a3, $zero, _stringcmp.end
bne $a2, $a3, _stringcmp.differents
addiu $a0, $a0, 1
addiu $a1, $a1, 1
j _stringcmp.loop
_stringcmp.end:
beq $a2, $a3, _stringcmp.equals
_stringcmp.differents:
li $v0, 0
jr $ra
_stringcmp.equals:
li $v0, 1
jr $ra
inherit:
beq $a0, $a1, inherit_true
beq $a0, $zero, inherit_false
lw $a0, ($a0)
j inherit
inherit_true:
li $v0, 1
jr $ra
inherit_false:
li $v0, 0
jr $ra

Object.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
Int.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
IO.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
Bool.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
String.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
#--------------Initial Code---------------
main:
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $v0, 9
li $a0, 8
syscall
sw $v0, -4($sp)
la $a1, Main_VT
sw $a1, ($v0)
#DispatchParent in place
#obj 2 offset 1  result Main.Constructor
la $v0, 1
jal Main.Constructor
sw $a1, ($sp)
#Dispatch in place
#obj 3 offset 1  result Main.main
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal Main.main
sw $a1, ($sp)
j Object.abort
#--------------End Initial Code---------------
CellularAutomaton.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
CellularAutomaton.init:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Assignment
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -16($sp)
sw $a0, -4($sp)
lw $a0, -4($sp)
lw $a1, -20($sp)
sw $a0, 4($a1)
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -24($sp)
sw $a0, -4($sp)
lw $a0, -4($sp)
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
CellularAutomaton.print:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push self
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -20($sp)
sw $a0, -4($sp)
#Args: 0
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -28($sp)
lw $a1, 4($t0)
sw $a1, -4($sp)
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_1
sw $a0, -4($sp)
#Dispatch in place
#obj 3 offset 2  result String.concat
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal String.concat
sw $a1, ($sp)
addiu $sp, $sp, -8
#Dispatch in place
#obj 3 offset 6  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -24($sp)
sw $a0, -4($sp)
lw $a0, -4($sp)
sw $a0, -16($sp)
addiu $sp, $sp, -8
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
CellularAutomaton.num_cells:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -16($sp)
lw $a1, 4($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 2 offset 1  result String.length
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal String.length
sw $a1, ($sp)
addiu $sp, $sp, -4
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
CellularAutomaton.cell:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -20($sp)
lw $a1, 4($t0)
sw $a1, -4($sp)
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -20($sp)
sw $a0, -4($sp)
#Args: 1
#Integer
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, 4
#Dispatch in place
#obj 4 offset 3  result String.substr
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal String.substr
sw $a1, ($sp)
addiu $sp, $sp, -12
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
CellularAutomaton.cell_left_neighbor:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -20($sp)
sw $a0, -4($sp)
#Integer
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_2
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push self
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -28($sp)
sw $a0, -4($sp)
#Args: 0
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -32($sp)
sw $a0, -4($sp)
#Integer
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
sub $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
#Dispatch in place
#obj 3 offset 8  result CellularAutomaton.cell
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal CellularAutomaton.cell
sw $a1, ($sp)
addiu $sp, $sp, -4
lw $a0, -4($sp)
sw $a0, -16($sp)
j _fi_2
_if_2:
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push self
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -36($sp)
sw $a0, -4($sp)
#Args: 0
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push self
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -48($sp)
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 12  result CellularAutomaton.num_cells
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal CellularAutomaton.num_cells
sw $a1, ($sp)
addiu $sp, $sp, 0
#Integer
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
sub $a0, $a0, $a1
sw $a0, -16($sp)
addiu $sp, $sp, -8
#Dispatch in place
#obj 4 offset 11  result CellularAutomaton.cell
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal CellularAutomaton.cell
sw $a1, ($sp)
addiu $sp, $sp, -4
lw $a0, -4($sp)
sw $a0, -28($sp)
_fi_2:
addiu $sp, $sp, -8
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
CellularAutomaton.cell_right_neighbor:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -20($sp)
sw $a0, -4($sp)
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push self
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -36($sp)
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 9  result CellularAutomaton.num_cells
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal CellularAutomaton.num_cells
sw $a1, ($sp)
addiu $sp, $sp, 0
#Integer
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
sub $a0, $a0, $a1
sw $a0, -16($sp)
addiu $sp, $sp, -8
lw $a0, 3
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -16($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_3
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push self
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -32($sp)
sw $a0, -4($sp)
#Args: 0
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -36($sp)
sw $a0, -4($sp)
#Integer
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
add $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
#Dispatch in place
#obj 3 offset 9  result CellularAutomaton.cell
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal CellularAutomaton.cell
sw $a1, ($sp)
addiu $sp, $sp, -4
lw $a0, -4($sp)
sw $a0, -20($sp)
j _fi_3
_if_3:
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push self
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -40($sp)
sw $a0, -4($sp)
#Args: 0
#Integer
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Dispatch in place
#obj 3 offset 11  result CellularAutomaton.cell
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal CellularAutomaton.cell
sw $a1, ($sp)
addiu $sp, $sp, -4
lw $a0, -4($sp)
sw $a0, -28($sp)
_fi_3:
addiu $sp, $sp, -8
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
CellularAutomaton.cell_at_next_evolution:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push self
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -44($sp)
sw $a0, -4($sp)
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -44($sp)
sw $a0, -4($sp)
#Dispatch in place
#obj 3 offset 12  result CellularAutomaton.cell
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal CellularAutomaton.cell
sw $a1, ($sp)
addiu $sp, $sp, -4
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_4
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -16($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_5
#Integer
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -4($sp)
sw $a0, -16($sp)
j _fi_5
_if_5:
#Integer
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -4($sp)
sw $a0, -20($sp)
_fi_5:
addiu $sp, $sp, -8
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push self
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -56($sp)
sw $a0, -4($sp)
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -56($sp)
sw $a0, -4($sp)
#Dispatch in place
#obj 3 offset 15  result CellularAutomaton.cell_left_neighbor
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal CellularAutomaton.cell_left_neighbor
sw $a1, ($sp)
addiu $sp, $sp, -4
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_6
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -16($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_7
#Integer
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -4($sp)
sw $a0, -16($sp)
j _fi_7
_if_7:
#Integer
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -4($sp)
sw $a0, -20($sp)
_fi_7:
addiu $sp, $sp, -8
lw $a0, 4
lw $a1, -4($sp)
add $a0, $a0, $a1
sw $a0, -28($sp)
addiu $sp, $sp, -8
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push self
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -60($sp)
sw $a0, -4($sp)
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -60($sp)
sw $a0, -4($sp)
#Dispatch in place
#obj 3 offset 16  result CellularAutomaton.cell_right_neighbor
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal CellularAutomaton.cell_right_neighbor
sw $a1, ($sp)
addiu $sp, $sp, -4
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_8
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -16($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_9
#Integer
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -4($sp)
sw $a0, -16($sp)
j _fi_9
_if_9:
#Integer
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -4($sp)
sw $a0, -20($sp)
_fi_9:
addiu $sp, $sp, -8
lw $a0, 4
lw $a1, -4($sp)
add $a0, $a0, $a1
sw $a0, -36($sp)
addiu $sp, $sp, -8
#Integer
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -36($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_10
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_11
sw $a0, -4($sp)
lw $a0, -4($sp)
sw $a0, -36($sp)
j _fi_10
_if_10:
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_12
sw $a0, -4($sp)
lw $a0, -4($sp)
sw $a0, -40($sp)
_fi_10:
addiu $sp, $sp, -8
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
CellularAutomaton.evolve:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Let
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Let
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Let
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#loop
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
_loop_13:
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -48($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -52($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
li $t0, 1
add $a0, $a0, $t0
sge $a0, $a1, $a0
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _body_13
j _pool_13
_body_13:
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Assignment
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -56($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
#Args: 0
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push self
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -64($sp)
sw $a0, -4($sp)
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -68($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 3 offset 17  result CellularAutomaton.cell_at_next_evolution
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal CellularAutomaton.cell_at_next_evolution
sw $a1, ($sp)
addiu $sp, $sp, -4
#Dispatch in place
#obj 4 offset 3  result String.concat
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal String.concat
sw $a1, ($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
lw $a1, -56($sp)
sw $a0, -4($a1)
#Assignment
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -64($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
#Integer
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
add $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
lw $a1, -60($sp)
sw $a0, -4($a1)
lw $a0, -4($sp)
sw $a0, -16($sp)
addiu $sp, $sp, -8
addiu $sp, $sp, -8
j _loop_13
_pool_13:
#Assignment
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -48($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
lw $a0, -4($sp)
lw $a1, -48($sp)
sw $a0, 4($a1)
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -52($sp)
sw $a0, -4($sp)
lw $a0, -4($sp)
sw $a0, -20($sp)
addiu $sp, $sp, -12
lw $a0, ($sp)
sw $a0, ($sp)
addiu $sp, $sp, -8
lw $a0, ($sp)
sw $a0, ($sp)
addiu $sp, $sp, -8
lw $a0, ($sp)
sw $a0, ($sp)
addiu $sp, $sp, -8
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
Main.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
Main.main:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Assignment
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $v0, 9
li $a0, 8
syscall
sw $v0, -4($sp)
la $a1, CellularAutomaton_VT
sw $a1, ($v0)
lw $a0, -4($sp)
sw $a0, -12($sp)
#DispatchParent in place
#obj 2 offset 1  result CellularAutomaton.Constructor
la $v0, 1
jal CellularAutomaton.Constructor
sw $a1, ($sp)
addiu $sp, $sp, -8
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_14
sw $a0, -4($sp)
#Dispatch in place
#obj 3 offset 2  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
lw $a1, -16($sp)
sw $a0, 4($a1)
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -24($sp)
lw $a1, 4($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 2 offset 1  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -4
#Let
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#loop
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
_loop_15:
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Integer
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -44($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
li $t0, 1
add $a0, $a0, $t0
sge $a0, $a1, $a0
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _body_15
j _pool_15
_body_15:
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -48($sp)
lw $a1, 4($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 2 offset 1  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -4
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -52($sp)
lw $a1, 4($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 2 offset 1  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -4
#Assignment
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -56($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
#Integer
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
sub $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
lw $a1, -52($sp)
sw $a0, -4($a1)
lw $a0, -4($sp)
sw $a0, -16($sp)
addiu $sp, $sp, -12
addiu $sp, $sp, -8
j _loop_15
_pool_15:
lw $a0, ($sp)
sw $a0, ($sp)
addiu $sp, $sp, -8
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -32($sp)
sw $a0, -4($sp)
lw $a0, -4($sp)
sw $a0, -24($sp)
addiu $sp, $sp, -16
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
li $v0, 10
syscall
