.data
buffer: .space 80
strsubstrexception: .asciiz "Substring index exception"

string_7: .asciiz "0"
string_9: .asciiz "1"
string_11: .asciiz "2"
string_13: .asciiz "3"
string_15: .asciiz "4"
string_17: .asciiz "5"
string_19: .asciiz "6"
string_21: .asciiz "7"
string_23: .asciiz "8"
string_25: .asciiz "9"
string_37: .asciiz ""
string_38: .asciiz "9"
string_39: .asciiz "8"
string_40: .asciiz "7"
string_41: .asciiz "6"
string_42: .asciiz "5"
string_43: .asciiz "4"
string_44: .asciiz "3"
string_45: .asciiz "2"
string_46: .asciiz "1"
string_47: .asciiz "0"
string_49: .asciiz "-"
string_51: .asciiz "+"
string_56: .asciiz "-"
string_57: .asciiz "0"
string_59: .asciiz ""
string_60: .asciiz "\n\tTo add a number to "
string_61: .asciiz "...enter a:\n"
string_62: .asciiz "\tTo negate "
string_63: .asciiz "...enter b:\n"
string_64: .asciiz "\tTo find the difference between "
string_65: .asciiz "and another number...enter c:\n"
string_66: .asciiz "\tTo find the factorial of "
string_67: .asciiz "...enter d:\n"
string_68: .asciiz "\tTo square "
string_69: .asciiz "...enter e:\n"
string_70: .asciiz "\tTo cube "
string_71: .asciiz "...enter f:\n"
string_72: .asciiz "\tTo find out if "
string_73: .asciiz "is a multiple of 3...enter g:\n"
string_74: .asciiz "\tTo divide "
string_75: .asciiz "by 8...enter h:\n"
string_76: .asciiz "\tTo get a new number...enter j:\n"
string_77: .asciiz "\tTo quit...enter q:\n\n"
string_78: .asciiz "\n"
string_79: .asciiz "Please enter a number...  "
string_90: .asciiz "Class type is now A\n"
string_91: .asciiz "Class type is now B\n"
string_92: .asciiz "Class type is now C\n"
string_93: .asciiz "Class type is now D\n"
string_94: .asciiz "Class type is now E\n"
string_95: .asciiz "Oooops\n"
string_96: .asciiz " "
string_98: .asciiz "number "
string_100: .asciiz "is odd!\n"
string_101: .asciiz "is even!\n"
string_102: .asciiz "a"
string_104: .asciiz "b"
string_106: .asciiz "c"
string_108: .asciiz "d"
string_110: .asciiz "e"
string_112: .asciiz "f"
string_114: .asciiz "g"
string_116: .asciiz "h"
string_118: .asciiz "j"
string_120: .asciiz "q"
string_122: .asciiz "number "
string_123: .asciiz "is equal to "
string_124: .asciiz "times 8 with a remainder of "
string_125: .asciiz "\n"
string_127: .asciiz "number "
string_128: .asciiz "is not divisible by 3.\n"
string_129: .asciiz "number "
string_130: .asciiz "is divisible by 3.\n"
string_135: .asciiz "Oooops\n"
Object_INH:
String_INH:
.word Object_INH
Int_INH:
.word Object_INH
Bool_INH:
.word Object_INH
IO_INH:
.word Object_INH
SELF_TYPE_INH:
.word Object_INH
A_INH:
.word Object_INH
B_INH:
.word A_INH
C_INH:
.word B_INH
D_INH:
.word B_INH
E_INH:
.word D_INH
A2I_INH:
.word Object_INH
Main_INH:
.word IO_INH
String_VT:
.word String_INH
.word String.length
.word String.concat
.word String.substr
Object_VT:
.word Object_INH
.word Object.abort
.word Object.type_name
.word Object.copy
IO_VT:
.word IO_INH
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
A_VT:
.word A_INH
.word A.value
.word A.set_var
.word A.method1
.word A.method2
.word A.method3
.word A.method4
.word A.method5
B_VT:
.word B_INH
.word B.method5
C_VT:
.word C_INH
.word C.method6
.word C.method5
D_VT:
.word D_INH
.word D.method7
E_VT:
.word E_INH
.word E.method6
A2I_VT:
.word A2I_INH
.word A2I.c2i
.word A2I.i2c
.word A2I.a2i
.word A2I.a2i_aux
.word A2I.i2a
.word A2I.i2a_aux
Main_VT:
.word Main_INH
.word Main.menu
.word Main.prompt
.word Main.get_int
.word Main.is_even
.word Main.class_type
.word Main.print
.word Main.main

.globl main
.text
IO.out_string:
li $v0, 4
syscall
jr $ra


IO.out_int:
li $v0, 1
lw $a0, -4($sp)
syscall
jr $ra


IO.in_string:
move $a3, $ra
la $a0, buffer
li $a1, 65536
li $v0, 8
syscall
addiu $sp, $sp, -4
sw $a0, 0($sp)
jal String.length
addiu $sp, $sp, 4
move $a2, $v0
addiu $a2, $a2, -1
move $a0, $v0
li $v0, 9
syscall
move $v1, $v0
la $a0, buffer
_in_string.loop:
beqz $a2, _in_string.end
lb $a1, 0($a0)
sb $a1, 0($v1)
addiu $a0, $a0, 1
addiu $v1, $v1, 1
addiu $a2, $a2, -1
j _in_string.loop
_in_string.end:
sb $zero, 0($v1)
move $ra, $a3
jr $ra


IO.in_int:
li $v0, 5
syscall
jr $ra
Object.copy:
lw $a1, -4($sp)
lw $a0, -8($sp)
li $v0, 9
syscall
lw $a1, -4($sp)
lw $a0, 4($a1)
move $a3, $v0
_copy.loop:
lw $a2, 0($a1)
sw $a2, 0($a3)
addiu $a0, $a0, -1
addiu $a1, $a1, 4
addiu $a3, $a3, 4
beq $a0, $zero, _copy.end
j _copy.loop
_copy.end:
jr $ra


Object.abort:
li $v0, 10
syscall

Object.type_name:


String.length:
lw $a0, -4($sp)
_stringlength.loop:
lb $a1, 0($a0)
beqz $a1, _stringlength.end
addiu $a0, $a0, 1
j _stringlength.loop
_stringlength.end:
lw $a1, -4($sp)
subu $v0, $a0, $a1
jr $ra


String.concat:
move $a2, $ra
jal String.length
move $v1, $v0
addiu $sp, $sp, -4
jal String.length
addiu $sp, $sp, 4
add $v1, $v1, $v0
addi $v1, $v1, 1
li $v0, 9
move $a0, $v1
syscall
move $v1, $v0
lw $a0, 0($sp)
_stringconcat.loop1:
lb $a1, 0($a0)
beqz $a1, _stringconcat.end1
sb $a1, 0($v1)
addiu $a0, $a0, 1
addiu $v1, $v1, 1
j _stringconcat.loop1
_stringconcat.end1:
lw $a0, -4($sp)
_stringconcat.loop2:
lb $a1, 0($a0)
beqz $a1, _stringconcat.end2
sb $a1, 0($v1)
addiu $a0, $a0, 1
addiu $v1, $v1, 1
j _stringconcat.loop2
_stringconcat.end2:
sb $zero, 0($v1)
move $ra, $a2
jr $ra

String.substr:
lw $a0, -12($sp)
addiu $a0, $a0, 1
li $v0, 9
syscall
move $v1, $v0
lw $a0, -4($sp)
lw $a1, -8($sp)
add $a0, $a0, $a1
lw $a2, -12($sp)
_stringsubstr.loop:
beqz $a2, _stringsubstr.end
lb $a1, 0($a0)
beqz $a1, _substrexception
sb $a1, 0($v1)
addiu $a0, $a0, 1
addiu $v1, $v1, 1
addiu $a2, $a2, -1
j _stringsubstr.loop
_stringsubstr.end:
sb $zero, 0($v1)
jr $ra


_substrexception:
la $a0, strsubstrexception
li $v0, 4
syscall
li $v0, 10
syscall


_stringcmp:
li $v0, 1
_stringcmp.loop:
lb $a2, 0($a0)
lb $a3, 0($a1)
beqz $a2, _stringcmp.end
beq $a2, $zero, _stringcmp.end
beq $a3, $zero, _stringcmp.end
bne $a2, $a3, _stringcmp.differents
addiu $a0, $a0, 1
addiu $a1, $a1, 1
j _stringcmp.loop
_stringcmp.end:
beq $a2, $a3, _stringcmp.equals
_stringcmp.differents:
li $v0, 0
jr $ra
_stringcmp.equals:
li $v0, 1
jr $ra
inherit:
beq $a0, $a1, inherit_true
beq $a0, $zero, inherit_false
lw $a0, ($a0)
j inherit
inherit_true:
li $v0, 1
jr $ra
inherit_false:
li $v0, 0
jr $ra

Object.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
Int.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
IO.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
Bool.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
String.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
#--------------Initial Code---------------
main:
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $v0, 9
li $a0, 20
syscall
sw $v0, -4($sp)
la $a1, Main_VT
sw $a1, ($v0)
#DispatchParent in place
#obj 2 offset 1  result Main.Constructor
la $v0, 1
jal Main.Constructor
sw $a1, ($sp)
#Dispatch in place
#obj 3 offset 1  result Main.main
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal Main.main
sw $a1, ($sp)
j Object.abort
#--------------End Initial Code---------------
A.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Integer
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -4($sp)
lw $a1, -12($sp)
sw $a0, 4($a1)
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
A.value:
sw $ra, 0($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -12($sp)
lw $a1, 4($t0)
sw $a1, -4($sp)
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
A.set_var:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Assignment
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -16($sp)
sw $a0, -4($sp)
lw $a0, -4($sp)
lw $a1, -20($sp)
sw $a0, 4($a1)
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -24($sp)
sw $a0, -4($sp)
lw $a0, -4($sp)
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
A.method1:
sw $ra, 0($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -16($sp)
sw $a0, -4($sp)
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
A.method2:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Let
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Assignment
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -32($sp)
sw $a0, -4($sp)
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -32($sp)
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
add $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
lw $a1, -40($sp)
sw $a0, -4($a1)
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $v0, 9
li $a0, 4
syscall
sw $v0, -4($sp)
la $a1, B_VT
sw $a1, ($v0)
lw $a0, -4($sp)
sw $a0, -12($sp)
#DispatchParent in place
#obj 2 offset 1  result B.Constructor
la $v0, 1
jal B.Constructor
sw $a1, ($sp)
addiu $sp, $sp, -8
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -60($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 5 offset 2  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -36($sp)
addiu $sp, $sp, -8
lw $a0, ($sp)
sw $a0, ($sp)
addiu $sp, $sp, -8
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
A.method3:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Let
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Assignment
#Unary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -28($sp)
sw $a0, -4($sp)
lw $a0, -4($sp)
not $a0, $a0
sw $a0, -8($sp)
lw $a0, -4($sp)
lw $a1, -32($sp)
sw $a0, -4($a1)
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $v0, 9
li $a0, 4
syscall
sw $v0, -4($sp)
la $a1, C_VT
sw $a1, ($v0)
lw $a0, -4($sp)
sw $a0, -12($sp)
#DispatchParent in place
#obj 2 offset 1  result C.Constructor
la $v0, 1
jal C.Constructor
sw $a1, ($sp)
addiu $sp, $sp, -8
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -52($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 5 offset 2  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -32($sp)
addiu $sp, $sp, -8
lw $a0, ($sp)
sw $a0, ($sp)
addiu $sp, $sp, -8
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
A.method4:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -20($sp)
sw $a0, -4($sp)
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -28($sp)
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
li $t0, 1
add $a0, $a0, $t0
sge $a0, $a1, $a0
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_1
#Let
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Assignment
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -44($sp)
sw $a0, -4($sp)
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -52($sp)
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
sub $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
lw $a1, -56($sp)
sw $a0, -4($a1)
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $v0, 9
li $a0, 4
syscall
sw $v0, -4($sp)
la $a1, D_VT
sw $a1, ($v0)
lw $a0, -4($sp)
sw $a0, -12($sp)
#DispatchParent in place
#obj 2 offset 1  result D.Constructor
la $v0, 1
jal D.Constructor
sw $a1, ($sp)
addiu $sp, $sp, -8
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -76($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 5 offset 2  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -36($sp)
addiu $sp, $sp, -8
lw $a0, ($sp)
sw $a0, ($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -24($sp)
j _fi_1
_if_1:
#Let
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Assignment
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -56($sp)
sw $a0, -4($sp)
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -56($sp)
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
sub $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
lw $a1, -64($sp)
sw $a0, -4($a1)
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $v0, 9
li $a0, 4
syscall
sw $v0, -4($sp)
la $a1, D_VT
sw $a1, ($v0)
lw $a0, -4($sp)
sw $a0, -12($sp)
#DispatchParent in place
#obj 2 offset 1  result D.Constructor
la $v0, 1
jal D.Constructor
sw $a1, ($sp)
addiu $sp, $sp, -8
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -84($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 5 offset 2  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -36($sp)
addiu $sp, $sp, -8
lw $a0, ($sp)
sw $a0, ($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -32($sp)
_fi_1:
addiu $sp, $sp, -8
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
A.method5:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Let
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Let
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#loop
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
_loop_2:
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -44($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -44($sp)
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
add $a0, $a1, $a0
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _body_2
j _pool_2
_body_2:
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Assignment
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -60($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -64($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
mult $a0, $a1
mflo $a0
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
lw $a1, -64($sp)
sw $a0, -4($a1)
#Assignment
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -72($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
#Integer
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
add $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
lw $a1, -76($sp)
sw $a0, -4($a1)
lw $a0, -4($sp)
sw $a0, -28($sp)
addiu $sp, $sp, -8
addiu $sp, $sp, -8
j _loop_2
_pool_2:
lw $a0, ($sp)
sw $a0, ($sp)
addiu $sp, $sp, -8
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $v0, 9
li $a0, 4
syscall
sw $v0, -4($sp)
la $a1, E_VT
sw $a1, ($v0)
lw $a0, -4($sp)
sw $a0, -12($sp)
#DispatchParent in place
#obj 2 offset 1  result E.Constructor
la $v0, 1
jal E.Constructor
sw $a1, ($sp)
addiu $sp, $sp, -8
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -52($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 5 offset 2  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -32($sp)
addiu $sp, $sp, -8
lw $a0, ($sp)
sw $a0, ($sp)
addiu $sp, $sp, -8
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
B.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
B.method5:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Let
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Assignment
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -28($sp)
sw $a0, -4($sp)
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -32($sp)
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
mult $a0, $a1
mflo $a0
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
lw $a1, -36($sp)
sw $a0, -4($a1)
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $v0, 9
li $a0, 4
syscall
sw $v0, -4($sp)
la $a1, E_VT
sw $a1, ($v0)
lw $a0, -4($sp)
sw $a0, -12($sp)
#DispatchParent in place
#obj 2 offset 1  result E.Constructor
la $v0, 1
jal E.Constructor
sw $a1, ($sp)
addiu $sp, $sp, -8
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -56($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 5 offset 2  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -36($sp)
addiu $sp, $sp, -8
lw $a0, ($sp)
sw $a0, ($sp)
addiu $sp, $sp, -8
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
C.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
C.method6:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Let
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Assignment
#Unary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -28($sp)
sw $a0, -4($sp)
lw $a0, -4($sp)
not $a0, $a0
sw $a0, -8($sp)
lw $a0, -4($sp)
lw $a1, -32($sp)
sw $a0, -4($a1)
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $v0, 9
li $a0, 8
syscall
sw $v0, -4($sp)
la $a1, A_VT
sw $a1, ($v0)
lw $a0, -4($sp)
sw $a0, -12($sp)
#DispatchParent in place
#obj 2 offset 1  result A.Constructor
la $v0, 1
jal A.Constructor
sw $a1, ($sp)
addiu $sp, $sp, -8
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -52($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 5 offset 2  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -32($sp)
addiu $sp, $sp, -8
lw $a0, ($sp)
sw $a0, ($sp)
addiu $sp, $sp, -8
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
C.method5:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Let
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Assignment
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -32($sp)
sw $a0, -4($sp)
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -36($sp)
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
mult $a0, $a1
mflo $a0
sw $a0, -12($sp)
addiu $sp, $sp, -8
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -40($sp)
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
mult $a0, $a1
mflo $a0
sw $a0, -20($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
lw $a1, -44($sp)
sw $a0, -4($a1)
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $v0, 9
li $a0, 4
syscall
sw $v0, -4($sp)
la $a1, E_VT
sw $a1, ($v0)
lw $a0, -4($sp)
sw $a0, -12($sp)
#DispatchParent in place
#obj 2 offset 1  result E.Constructor
la $v0, 1
jal E.Constructor
sw $a1, ($sp)
addiu $sp, $sp, -8
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -64($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 5 offset 2  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -44($sp)
addiu $sp, $sp, -8
lw $a0, ($sp)
sw $a0, ($sp)
addiu $sp, $sp, -8
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
D.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
D.method7:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Let
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -32($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
#Integer
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
li $t0, 1
add $a0, $a0, $t0
sge $a0, $a1, $a0
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_3
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Integer
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -52($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_4
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Integer
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -68($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_5
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Integer
li $a0, 2
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -84($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_6
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push self
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -92($sp)
sw $a0, -4($sp)
#Args: 0
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -100($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
#Integer
li $a0, 3
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
sub $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
#Dispatch in place
#obj 5 offset 26  result D.method7
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal D.method7
sw $a1, ($sp)
addiu $sp, $sp, -4
lw $a0, -4($sp)
sw $a0, -36($sp)
j _fi_6
_if_6:
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -4($sp)
sw $a0, -40($sp)
_fi_6:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -56($sp)
j _fi_5
_if_5:
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -4($sp)
sw $a0, -60($sp)
_fi_5:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -76($sp)
j _fi_4
_if_4:
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -4($sp)
sw $a0, -80($sp)
_fi_4:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -96($sp)
j _fi_3
_if_3:
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push self
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -124($sp)
sw $a0, -4($sp)
#Args: 0
#Unary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -132($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
lw $a0, -4($sp)
not $a0, $a0
sw $a0, -8($sp)
#Dispatch in place
#obj 4 offset 33  result D.method7
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal D.method7
sw $a1, ($sp)
addiu $sp, $sp, -4
lw $a0, -4($sp)
sw $a0, -112($sp)
_fi_3:
addiu $sp, $sp, -8
lw $a0, ($sp)
sw $a0, ($sp)
addiu $sp, $sp, -8
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
E.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
E.method6:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Let
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Assignment
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -28($sp)
sw $a0, -4($sp)
#Integer
li $a0, 8
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
div $a0, $a1
mflo $a0
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
lw $a1, -36($sp)
sw $a0, -4($a1)
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $v0, 9
li $a0, 8
syscall
sw $v0, -4($sp)
la $a1, A_VT
sw $a1, ($v0)
lw $a0, -4($sp)
sw $a0, -12($sp)
#DispatchParent in place
#obj 2 offset 1  result A.Constructor
la $v0, 1
jal A.Constructor
sw $a1, ($sp)
addiu $sp, $sp, -8
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -56($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 5 offset 2  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -36($sp)
addiu $sp, $sp, -8
lw $a0, ($sp)
sw $a0, ($sp)
addiu $sp, $sp, -8
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
A2I.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
A2I.c2i:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -20($sp)
sw $a0, -4($sp)
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_7
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_8
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -36($sp)
sw $a0, -4($sp)
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_9
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_10
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -52($sp)
sw $a0, -4($sp)
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_11
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_12
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -68($sp)
sw $a0, -4($sp)
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_13
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_14
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -84($sp)
sw $a0, -4($sp)
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_15
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_16
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -100($sp)
sw $a0, -4($sp)
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_17
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_18
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -116($sp)
sw $a0, -4($sp)
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_19
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_20
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -132($sp)
sw $a0, -4($sp)
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_21
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_22
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -148($sp)
sw $a0, -4($sp)
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_23
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_24
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -164($sp)
sw $a0, -4($sp)
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_25
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_26
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push self
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -184($sp)
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 46  result Object.abort
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal Object.abort
sw $a1, ($sp)
addiu $sp, $sp, 0
#Integer
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -4($sp)
sw $a0, -16($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -32($sp)
j _fi_26
_if_26:
#Integer
li $a0, 9
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -4($sp)
sw $a0, -36($sp)
_fi_26:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -52($sp)
j _fi_24
_if_24:
#Integer
li $a0, 8
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -4($sp)
sw $a0, -56($sp)
_fi_24:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -72($sp)
j _fi_22
_if_22:
#Integer
li $a0, 7
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -4($sp)
sw $a0, -76($sp)
_fi_22:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -92($sp)
j _fi_20
_if_20:
#Integer
li $a0, 6
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -4($sp)
sw $a0, -96($sp)
_fi_20:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -112($sp)
j _fi_18
_if_18:
#Integer
li $a0, 5
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -4($sp)
sw $a0, -116($sp)
_fi_18:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -132($sp)
j _fi_16
_if_16:
#Integer
li $a0, 4
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -4($sp)
sw $a0, -136($sp)
_fi_16:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -152($sp)
j _fi_14
_if_14:
#Integer
li $a0, 3
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -4($sp)
sw $a0, -156($sp)
_fi_14:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -172($sp)
j _fi_12
_if_12:
#Integer
li $a0, 2
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -4($sp)
sw $a0, -176($sp)
_fi_12:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -192($sp)
j _fi_10
_if_10:
#Integer
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -4($sp)
sw $a0, -196($sp)
_fi_10:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -212($sp)
j _fi_8
_if_8:
#Integer
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -4($sp)
sw $a0, -216($sp)
_fi_8:
addiu $sp, $sp, -8
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
A2I.i2c:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -20($sp)
sw $a0, -4($sp)
#Integer
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_27
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -36($sp)
sw $a0, -4($sp)
#Integer
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_28
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -52($sp)
sw $a0, -4($sp)
#Integer
li $a0, 2
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_29
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -68($sp)
sw $a0, -4($sp)
#Integer
li $a0, 3
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_30
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -84($sp)
sw $a0, -4($sp)
#Integer
li $a0, 4
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_31
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -100($sp)
sw $a0, -4($sp)
#Integer
li $a0, 5
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_32
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -116($sp)
sw $a0, -4($sp)
#Integer
li $a0, 6
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_33
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -132($sp)
sw $a0, -4($sp)
#Integer
li $a0, 7
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_34
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -148($sp)
sw $a0, -4($sp)
#Integer
li $a0, 8
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_35
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -164($sp)
sw $a0, -4($sp)
#Integer
li $a0, 9
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_36
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push self
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -184($sp)
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 46  result Object.abort
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal Object.abort
sw $a1, ($sp)
addiu $sp, $sp, 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_37
sw $a0, -4($sp)
lw $a0, -4($sp)
sw $a0, -16($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -32($sp)
j _fi_36
_if_36:
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_38
sw $a0, -4($sp)
lw $a0, -4($sp)
sw $a0, -36($sp)
_fi_36:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -52($sp)
j _fi_35
_if_35:
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_39
sw $a0, -4($sp)
lw $a0, -4($sp)
sw $a0, -56($sp)
_fi_35:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -72($sp)
j _fi_34
_if_34:
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_40
sw $a0, -4($sp)
lw $a0, -4($sp)
sw $a0, -76($sp)
_fi_34:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -92($sp)
j _fi_33
_if_33:
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_41
sw $a0, -4($sp)
lw $a0, -4($sp)
sw $a0, -96($sp)
_fi_33:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -112($sp)
j _fi_32
_if_32:
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_42
sw $a0, -4($sp)
lw $a0, -4($sp)
sw $a0, -116($sp)
_fi_32:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -132($sp)
j _fi_31
_if_31:
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_43
sw $a0, -4($sp)
lw $a0, -4($sp)
sw $a0, -136($sp)
_fi_31:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -152($sp)
j _fi_30
_if_30:
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_44
sw $a0, -4($sp)
lw $a0, -4($sp)
sw $a0, -156($sp)
_fi_30:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -172($sp)
j _fi_29
_if_29:
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_45
sw $a0, -4($sp)
lw $a0, -4($sp)
sw $a0, -176($sp)
_fi_29:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -192($sp)
j _fi_28
_if_28:
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_46
sw $a0, -4($sp)
lw $a0, -4($sp)
sw $a0, -196($sp)
_fi_28:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -212($sp)
j _fi_27
_if_27:
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_47
sw $a0, -4($sp)
lw $a0, -4($sp)
sw $a0, -216($sp)
_fi_27:
addiu $sp, $sp, -8
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
A2I.a2i:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -24($sp)
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 1  result String.length
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal String.length
sw $a1, ($sp)
addiu $sp, $sp, -4
#Integer
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -16($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_48
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -44($sp)
sw $a0, -4($sp)
#Args: 0
#Integer
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 1
#Integer
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, 4
#Dispatch in place
#obj 4 offset 3  result String.substr
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal String.substr
sw $a1, ($sp)
addiu $sp, $sp, -12
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_49
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -24($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_50
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -72($sp)
sw $a0, -4($sp)
#Args: 0
#Integer
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 1
#Integer
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, 4
#Dispatch in place
#obj 4 offset 3  result String.substr
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal String.substr
sw $a1, ($sp)
addiu $sp, $sp, -12
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_51
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -24($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_52
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push self
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -96($sp)
sw $a0, -4($sp)
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -96($sp)
sw $a0, -4($sp)
#Dispatch in place
#obj 3 offset 25  result A2I.a2i_aux
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal A2I.a2i_aux
sw $a1, ($sp)
addiu $sp, $sp, -4
lw $a0, -4($sp)
sw $a0, -40($sp)
j _fi_52
_if_52:
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push self
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -108($sp)
sw $a0, -4($sp)
#Args: 0
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -112($sp)
sw $a0, -4($sp)
#Args: 0
#Integer
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 1
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -128($sp)
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 1  result String.length
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal String.length
sw $a1, ($sp)
addiu $sp, $sp, -4
#Integer
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
sub $a0, $a0, $a1
sw $a0, -16($sp)
addiu $sp, $sp, -8
#Dispatch in place
#obj 7 offset 6  result String.substr
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal String.substr
sw $a1, ($sp)
addiu $sp, $sp, -12
#Dispatch in place
#obj 9 offset 34  result A2I.a2i_aux
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal A2I.a2i_aux
sw $a1, ($sp)
addiu $sp, $sp, -4
lw $a0, -4($sp)
sw $a0, -76($sp)
_fi_52:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -104($sp)
j _fi_50
_if_50:
#Unary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push self
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -148($sp)
sw $a0, -4($sp)
#Args: 0
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -152($sp)
sw $a0, -4($sp)
#Args: 0
#Integer
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 1
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -168($sp)
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 1  result String.length
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal String.length
sw $a1, ($sp)
addiu $sp, $sp, -4
#Integer
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
sub $a0, $a0, $a1
sw $a0, -16($sp)
addiu $sp, $sp, -8
#Dispatch in place
#obj 7 offset 6  result String.substr
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal String.substr
sw $a1, ($sp)
addiu $sp, $sp, -12
#Dispatch in place
#obj 9 offset 44  result A2I.a2i_aux
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal A2I.a2i_aux
sw $a1, ($sp)
addiu $sp, $sp, -4
lw $a0, -4($sp)
not $a0, $a0
sw $a0, -40($sp)
lw $a0, -4($sp)
sw $a0, -144($sp)
_fi_50:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -164($sp)
j _fi_48
_if_48:
#Integer
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -4($sp)
sw $a0, -168($sp)
_fi_48:
addiu $sp, $sp, -8
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
A2I.a2i_aux:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Let
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Let
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Let
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#loop
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
_loop_53:
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -52($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -56($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
li $t0, 1
add $a0, $a0, $t0
sge $a0, $a1, $a0
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _body_53
j _pool_53
_body_53:
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Assignment
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -72($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
#Integer
li $a0, 10
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
mult $a0, $a1
mflo $a0
sw $a0, -12($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push self
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -84($sp)
sw $a0, -4($sp)
#Args: 0
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -88($sp)
sw $a0, -4($sp)
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -96($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
#Args: 1
#Integer
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, 4
#Dispatch in place
#obj 4 offset 3  result String.substr
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal String.substr
sw $a1, ($sp)
addiu $sp, $sp, -12
#Dispatch in place
#obj 6 offset 25  result A2I.c2i
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal A2I.c2i
sw $a1, ($sp)
addiu $sp, $sp, -4
lw $a0, 7
lw $a1, -4($sp)
add $a0, $a0, $a1
sw $a0, -40($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
lw $a1, -100($sp)
sw $a0, -4($a1)
#Assignment
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -108($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
#Integer
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
add $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
lw $a1, -112($sp)
sw $a0, -4($a1)
lw $a0, -4($sp)
sw $a0, -56($sp)
addiu $sp, $sp, -8
addiu $sp, $sp, -8
j _loop_53
_pool_53:
lw $a0, ($sp)
sw $a0, ($sp)
addiu $sp, $sp, -8
lw $a0, ($sp)
sw $a0, ($sp)
addiu $sp, $sp, -8
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -36($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
lw $a0, -4($sp)
sw $a0, -16($sp)
addiu $sp, $sp, -8
lw $a0, ($sp)
sw $a0, ($sp)
addiu $sp, $sp, -8
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
A2I.i2a:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -20($sp)
sw $a0, -4($sp)
#Integer
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_54
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Integer
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -40($sp)
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
li $t0, 1
add $a0, $a0, $t0
sge $a0, $a1, $a0
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_55
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_56
sw $a0, -4($sp)
#Args: 0
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push self
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -60($sp)
sw $a0, -4($sp)
#Args: 0
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -64($sp)
sw $a0, -4($sp)
#Unary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Integer
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -4($sp)
not $a0, $a0
sw $a0, -8($sp)
lw $a0, 3
lw $a1, -4($sp)
mult $a0, $a1
mflo $a0
sw $a0, -16($sp)
addiu $sp, $sp, -8
#Dispatch in place
#obj 6 offset 19  result A2I.i2a_aux
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal A2I.i2a_aux
sw $a1, ($sp)
addiu $sp, $sp, -4
#Dispatch in place
#obj 8 offset 7  result String.concat
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal String.concat
sw $a1, ($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -48($sp)
j _fi_55
_if_55:
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push self
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -84($sp)
sw $a0, -4($sp)
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -84($sp)
sw $a0, -4($sp)
#Dispatch in place
#obj 3 offset 22  result A2I.i2a_aux
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal A2I.i2a_aux
sw $a1, ($sp)
addiu $sp, $sp, -4
lw $a0, -4($sp)
sw $a0, -60($sp)
_fi_55:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -76($sp)
j _fi_54
_if_54:
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_57
sw $a0, -4($sp)
lw $a0, -4($sp)
sw $a0, -80($sp)
_fi_54:
addiu $sp, $sp, -8
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
A2I.i2a_aux:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -20($sp)
sw $a0, -4($sp)
#Integer
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_58
#Let
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push self
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -48($sp)
sw $a0, -4($sp)
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -52($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 3 offset 13  result A2I.i2a_aux
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal A2I.i2a_aux
sw $a1, ($sp)
addiu $sp, $sp, -4
#Args: 0
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push self
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -60($sp)
sw $a0, -4($sp)
#Args: 0
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -64($sp)
sw $a0, -4($sp)
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -76($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
#Integer
li $a0, 10
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
mult $a0, $a1
mflo $a0
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, 4
lw $a1, -4($sp)
sub $a0, $a0, $a1
sw $a0, -20($sp)
addiu $sp, $sp, -8
#Dispatch in place
#obj 7 offset 20  result A2I.i2c
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal A2I.i2c
sw $a1, ($sp)
addiu $sp, $sp, -4
#Dispatch in place
#obj 11 offset 8  result String.concat
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal String.concat
sw $a1, ($sp)
addiu $sp, $sp, -8
lw $a0, ($sp)
sw $a0, ($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -24($sp)
j _fi_58
_if_58:
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_59
sw $a0, -4($sp)
lw $a0, -4($sp)
sw $a0, -28($sp)
_fi_58:
addiu $sp, $sp, -8
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
Main.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, 4
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -4($sp)
lw $a1, -12($sp)
sw $a0, 16($a1)
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
Main.menu:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_60
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 5  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -28($sp)
lw $a1, 8($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 2 offset 7  result Main.print
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal Main.print
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_61
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 9  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_62
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 11  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -52($sp)
lw $a1, 8($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 2 offset 13  result Main.print
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal Main.print
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_63
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 15  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_64
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 17  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -76($sp)
lw $a1, 8($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 2 offset 19  result Main.print
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal Main.print
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_65
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 21  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_66
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 23  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -100($sp)
lw $a1, 8($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 2 offset 25  result Main.print
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal Main.print
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_67
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 27  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_68
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 29  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -124($sp)
lw $a1, 8($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 2 offset 31  result Main.print
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal Main.print
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_69
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 33  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_70
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 35  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -148($sp)
lw $a1, 8($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 2 offset 37  result Main.print
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal Main.print
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_71
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 39  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_72
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 41  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -172($sp)
lw $a1, 8($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 2 offset 43  result Main.print
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal Main.print
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_73
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 45  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_74
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 47  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -196($sp)
lw $a1, 8($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 2 offset 49  result Main.print
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal Main.print
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_75
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 51  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_76
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 53  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_77
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 55  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Dispatch in place
#obj 1 offset 56  result IO.in_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.in_string
sw $a1, ($sp)
addiu $sp, $sp, -4
lw $a0, -4($sp)
sw $a0, -216($sp)
addiu $sp, $sp, -108
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
Main.prompt:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_78
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 5  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_79
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 7  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Dispatch in place
#obj 1 offset 8  result IO.in_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.in_string
sw $a1, ($sp)
addiu $sp, $sp, -4
lw $a0, -4($sp)
sw $a0, -24($sp)
addiu $sp, $sp, -12
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
Main.get_int:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Let
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Let
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -36($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -40($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 3 offset 2  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -8
lw $a0, ($sp)
sw $a0, ($sp)
addiu $sp, $sp, -8
lw $a0, ($sp)
sw $a0, ($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -12($sp)
addiu $sp, $sp, -4
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
Main.is_even:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Let
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -32($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
#Integer
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
li $t0, 1
add $a0, $a0, $t0
sge $a0, $a1, $a0
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_80
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Integer
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -52($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_81
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Integer
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -68($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_82
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -80($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
#Integer
li $a0, 2
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, 2
lw $a1, -4($sp)
sub $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
#Dispatch in place
#obj 4 offset 21  result Main.is_even
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal Main.is_even
sw $a1, ($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -32($sp)
j _fi_82
_if_82:
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -4($sp)
sw $a0, -36($sp)
_fi_82:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -52($sp)
j _fi_81
_if_81:
li $a0, 1
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -4($sp)
sw $a0, -56($sp)
_fi_81:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -72($sp)
j _fi_80
_if_80:
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#Unary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -104($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
lw $a0, -4($sp)
not $a0, $a0
sw $a0, -8($sp)
#Dispatch in place
#obj 3 offset 26  result Main.is_even
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal Main.is_even
sw $a1, ($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -84($sp)
_fi_80:
addiu $sp, $sp, -8
lw $a0, ($sp)
sw $a0, ($sp)
addiu $sp, $sp, -8
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
Main.class_type:
sw $ra, 0($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -16($sp)
sw $a0, -4($sp)
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -8($sp)
la $a1, A
la $t0, inherit
jalr $ra, $t0
sw $v0, -4($sp)
lw $a0, -4($sp)
bnez $a0, branch_83
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -12($sp)
la $a1, B
la $t0, inherit
jalr $ra, $t0
sw $v0, -4($sp)
lw $a0, -4($sp)
bnez $a0, branch_84
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -16($sp)
la $a1, C
la $t0, inherit
jalr $ra, $t0
sw $v0, -4($sp)
lw $a0, -4($sp)
bnez $a0, branch_85
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -20($sp)
la $a1, D
la $t0, inherit
jalr $ra, $t0
sw $v0, -4($sp)
lw $a0, -4($sp)
bnez $a0, branch_86
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -24($sp)
la $a1, E
la $t0, inherit
jalr $ra, $t0
sw $v0, -4($sp)
lw $a0, -4($sp)
bnez $a0, branch_87
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -28($sp)
la $a1, Object
la $t0, inherit
jalr $ra, $t0
sw $v0, -4($sp)
lw $a0, -4($sp)
bnez $a0, branch_88
addiu $sp, $sp, -4
branch_83:
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -36($sp)
sw $a0, -4($sp)
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_90
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 15  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -12($sp)
addiu $sp, $sp, -12
branch_84:
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -48($sp)
sw $a0, -16($sp)
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_91
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 18  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -24($sp)
addiu $sp, $sp, -12
branch_85:
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -60($sp)
sw $a0, -28($sp)
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_92
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 21  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -36($sp)
addiu $sp, $sp, -12
branch_86:
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -72($sp)
sw $a0, -40($sp)
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_93
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 24  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -48($sp)
addiu $sp, $sp, -12
branch_87:
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -84($sp)
sw $a0, -52($sp)
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_94
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 27  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -60($sp)
addiu $sp, $sp, -12
branch_88:
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -96($sp)
sw $a0, -64($sp)
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_95
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 30  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -72($sp)
addiu $sp, $sp, -12
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
Main.print:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Let
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -36($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
#Args: 0
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -40($sp)
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 1  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -4
#Dispatch in place
#obj 4 offset 3  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -8
#Dispatch in place
#obj 5 offset 11  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_96
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 13  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -32($sp)
addiu $sp, $sp, -8
lw $a0, ($sp)
sw $a0, ($sp)
addiu $sp, $sp, -8
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
Main.main:
sw $ra, 0($sp)
addiu $sp, $sp, 4
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Assignment
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $v0, 9
li $a0, 8
syscall
sw $v0, -4($sp)
la $a1, A_VT
sw $a1, ($v0)
lw $a0, -4($sp)
sw $a0, -12($sp)
#DispatchParent in place
#obj 2 offset 1  result A.Constructor
la $v0, 1
jal A.Constructor
sw $a1, ($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
lw $a1, -24($sp)
sw $a0, 8($a1)
#loop
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
_loop_97:
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -32($sp)
lw $a1, 16($t0)
sw $a1, -4($sp)
lw $a0, -4($sp)
bnez $a0, _body_97
j _pool_97
_body_97:
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_98
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 11  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -52($sp)
lw $a1, 8($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 2 offset 13  result Main.print
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal Main.print
sw $a1, ($sp)
addiu $sp, $sp, -8
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -68($sp)
lw $a1, 8($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 2 offset 1  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -4
#Dispatch in place
#obj 3 offset 17  result Main.is_even
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal Main.is_even
sw $a1, ($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_99
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_100
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 19  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -24($sp)
j _fi_99
_if_99:
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_101
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 21  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -32($sp)
_fi_99:
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -92($sp)
lw $a1, 8($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 2 offset 23  result Main.class_type
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal Main.class_type
sw $a1, ($sp)
addiu $sp, $sp, -8
#Assignment
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Dispatch in place
#obj 1 offset 24  result Main.menu
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal Main.menu
sw $a1, ($sp)
addiu $sp, $sp, -4
lw $a0, -4($sp)
lw $a1, -96($sp)
sw $a0, 4($a1)
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -108($sp)
lw $a1, 4($t0)
sw $a1, -4($sp)
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_102
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_103
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -124($sp)
lw $a1, 4($t0)
sw $a1, -4($sp)
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_104
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_105
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -140($sp)
lw $a1, 4($t0)
sw $a1, -4($sp)
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_106
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_107
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -156($sp)
lw $a1, 4($t0)
sw $a1, -4($sp)
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_108
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_109
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -172($sp)
lw $a1, 4($t0)
sw $a1, -4($sp)
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_110
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_111
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -188($sp)
lw $a1, 4($t0)
sw $a1, -4($sp)
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_112
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_113
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -204($sp)
lw $a1, 4($t0)
sw $a1, -4($sp)
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_114
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_115
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -220($sp)
lw $a1, 4($t0)
sw $a1, -4($sp)
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_116
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_117
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -236($sp)
lw $a1, 4($t0)
sw $a1, -4($sp)
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_118
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_119
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Binary
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -252($sp)
lw $a1, 4($t0)
sw $a1, -4($sp)
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_120
sw $a0, -4($sp)
lw $a0, 2
lw $a1, -4($sp)
seq $a0, $a0, $a1
sw $a0, -12($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_121
#Assignment
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $v0, 9
li $a0, 8
syscall
sw $v0, -4($sp)
la $a1, A_VT
sw $a1, ($v0)
lw $a0, -4($sp)
sw $a0, -12($sp)
#DispatchParent in place
#obj 2 offset 1  result A.Constructor
la $v0, 1
jal A.Constructor
sw $a1, ($sp)
addiu $sp, $sp, -8
#Args: 0
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -280($sp)
lw $a1, 8($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 2 offset 1  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -4
#Dispatch in place
#obj 6 offset 3  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
lw $a1, -280($sp)
sw $a0, 8($a1)
lw $a0, -4($sp)
sw $a0, -40($sp)
j _fi_121
_if_121:
#Assignment
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -4($sp)
lw $a1, -284($sp)
sw $a0, 16($a1)
lw $a0, -4($sp)
sw $a0, -44($sp)
_fi_121:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -60($sp)
j _fi_119
_if_119:
#Assignment
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $v0, 9
li $a0, 8
syscall
sw $v0, -4($sp)
la $a1, A_VT
sw $a1, ($v0)
lw $a0, -4($sp)
sw $a0, -12($sp)
#DispatchParent in place
#obj 2 offset 1  result A.Constructor
la $v0, 1
jal A.Constructor
sw $a1, ($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
lw $a1, -296($sp)
sw $a0, 8($a1)
lw $a0, -4($sp)
sw $a0, -72($sp)
_fi_119:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -88($sp)
j _fi_117
_if_117:
#Let
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Assignment
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $v0, 9
li $a0, 4
syscall
sw $v0, -4($sp)
la $a1, E_VT
sw $a1, ($v0)
lw $a0, -4($sp)
sw $a0, -12($sp)
#DispatchParent in place
#obj 2 offset 1  result E.Constructor
la $v0, 1
jal E.Constructor
sw $a1, ($sp)
addiu $sp, $sp, -8
#Args: 0
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -332($sp)
lw $a1, 8($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 2 offset 1  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -4
#Dispatch in place
#obj 6 offset 3  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
lw $a1, -332($sp)
sw $a0, -4($a1)
#Let
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_122
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 88  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -360($sp)
lw $a1, 8($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 2 offset 90  result Main.print
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal Main.print
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_123
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 92  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -376($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 2 offset 94  result Main.print
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal Main.print
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_124
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 96  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
#Let
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -408($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -412($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 3 offset 2  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -8
#Dispatch in place
#obj 4 offset 103  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_125
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 105  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -28($sp)
addiu $sp, $sp, -8
lw $a0, ($sp)
sw $a0, ($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -52($sp)
addiu $sp, $sp, -24
lw $a0, ($sp)
sw $a0, ($sp)
addiu $sp, $sp, -8
#Assignment
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -344($sp)
lw $a1, -4($t0)
sw $a1, -4($sp)
lw $a0, -4($sp)
lw $a1, -344($sp)
sw $a0, 8($a1)
lw $a0, -4($sp)
sw $a0, -40($sp)
addiu $sp, $sp, -12
lw $a0, ($sp)
sw $a0, ($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -96($sp)
_fi_117:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -112($sp)
j _fi_115
_if_115:
#Condition
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $v0, 9
li $a0, 4
syscall
sw $v0, -4($sp)
la $a1, D_VT
sw $a1, ($v0)
lw $a0, -4($sp)
sw $a0, -12($sp)
#DispatchParent in place
#obj 2 offset 1  result D.Constructor
la $v0, 1
jal D.Constructor
sw $a1, ($sp)
addiu $sp, $sp, -8
#Args: 0
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -332($sp)
lw $a1, 8($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 2 offset 1  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -4
#Dispatch in place
#obj 6 offset 3  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
bnez $a0, _if_126
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_127
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 86  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -352($sp)
lw $a1, 8($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 2 offset 88  result Main.print
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal Main.print
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_128
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 90  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -28($sp)
addiu $sp, $sp, -12
lw $a0, -4($sp)
sw $a0, -56($sp)
j _fi_126
_if_126:
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_129
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 93  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -380($sp)
lw $a1, 8($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 2 offset 95  result Main.print
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal Main.print
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_130
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 97  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -28($sp)
addiu $sp, $sp, -12
lw $a0, -4($sp)
sw $a0, -84($sp)
_fi_126:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -196($sp)
_fi_115:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -212($sp)
j _fi_113
_if_113:
#Assignment
#Parent-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $v0, 9
li $a0, 4
syscall
sw $v0, -4($sp)
la $a1, C_VT
sw $a1, ($v0)
lw $a0, -4($sp)
sw $a0, -12($sp)
#DispatchParent in place
#obj 2 offset 1  result C.Constructor
la $v0, 1
jal C.Constructor
sw $a1, ($sp)
addiu $sp, $sp, -8
#Args: 0
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -412($sp)
lw $a1, 8($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 2 offset 1  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -4
#DispatchParent in place
#obj 6 offset 3  result method5.C
la $v0, 3
jal method5.C
sw $a1, ($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
lw $a1, -412($sp)
sw $a0, 8($a1)
lw $a0, -4($sp)
sw $a0, -236($sp)
_fi_113:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -252($sp)
j _fi_111
_if_111:
#Assignment
#Parent-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $v0, 9
li $a0, 4
syscall
sw $v0, -4($sp)
la $a1, C_VT
sw $a1, ($v0)
lw $a0, -4($sp)
sw $a0, -12($sp)
#DispatchParent in place
#obj 2 offset 1  result C.Constructor
la $v0, 1
jal C.Constructor
sw $a1, ($sp)
addiu $sp, $sp, -8
#Args: 0
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -436($sp)
lw $a1, 8($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 2 offset 1  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -4
#DispatchParent in place
#obj 6 offset 3  result method5.C
la $v0, 3
jal method5.C
sw $a1, ($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
lw $a1, -436($sp)
sw $a0, 8($a1)
lw $a0, -4($sp)
sw $a0, -276($sp)
_fi_111:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -292($sp)
j _fi_109
_if_109:
#Assignment
#Parent-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $v0, 9
li $a0, 4
syscall
sw $v0, -4($sp)
la $a1, C_VT
sw $a1, ($v0)
lw $a0, -4($sp)
sw $a0, -12($sp)
#DispatchParent in place
#obj 2 offset 1  result C.Constructor
la $v0, 1
jal C.Constructor
sw $a1, ($sp)
addiu $sp, $sp, -8
#Args: 0
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -460($sp)
lw $a1, 8($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 2 offset 1  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -4
#DispatchParent in place
#obj 6 offset 3  result method5.C
la $v0, 3
jal method5.C
sw $a1, ($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
lw $a1, -460($sp)
sw $a0, 8($a1)
lw $a0, -4($sp)
sw $a0, -316($sp)
_fi_109:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -332($sp)
j _fi_107
_if_107:
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Assignment
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $v0, 9
li $a0, 8
syscall
sw $v0, -4($sp)
la $a1, A_VT
sw $a1, ($v0)
lw $a0, -4($sp)
sw $a0, -12($sp)
#DispatchParent in place
#obj 2 offset 1  result A.Constructor
la $v0, 1
jal A.Constructor
sw $a1, ($sp)
addiu $sp, $sp, -8
#Args: 0
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Dispatch in place
#obj 1 offset 121  result Main.get_int
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal Main.get_int
sw $a1, ($sp)
addiu $sp, $sp, -4
#Dispatch in place
#obj 5 offset 2  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
lw $a1, -484($sp)
sw $a0, 12($a1)
#Assignment
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $v0, 9
li $a0, 4
syscall
sw $v0, -4($sp)
la $a1, D_VT
sw $a1, ($v0)
lw $a0, -4($sp)
sw $a0, -12($sp)
#DispatchParent in place
#obj 2 offset 1  result D.Constructor
la $v0, 1
jal D.Constructor
sw $a1, ($sp)
addiu $sp, $sp, -8
#Args: 0
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -508($sp)
lw $a1, 8($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 2 offset 1  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -4
#Args: 1
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -516($sp)
lw $a1, 12($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 2 offset 1  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -4
#Dispatch in place
#obj 8 offset 5  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -12
lw $a0, -4($sp)
lw $a1, -516($sp)
sw $a0, 8($a1)
lw $a0, -4($sp)
sw $a0, -56($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -388($sp)
_fi_107:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -404($sp)
j _fi_105
_if_105:
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -524($sp)
lw $a1, 8($t0)
sw $a1, -4($sp)
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -8($sp)
la $a1, C
la $t0, inherit
jalr $ra, $t0
sw $v0, -4($sp)
lw $a0, -4($sp)
bnez $a0, branch_131
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -12($sp)
la $a1, A
la $t0, inherit
jalr $ra, $t0
sw $v0, -4($sp)
lw $a0, -4($sp)
bnez $a0, branch_132
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -16($sp)
la $a1, Object
la $t0, inherit
jalr $ra, $t0
sw $v0, -4($sp)
lw $a0, -4($sp)
bnez $a0, branch_133
addiu $sp, $sp, -4
branch_131:
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -24($sp)
sw $a0, -4($sp)
#Assignment
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -16($sp)
sw $a0, -4($sp)
#Args: 0
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -24($sp)
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 1  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -4
#Dispatch in place
#obj 4 offset 3  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
lw $a1, -560($sp)
sw $a0, 8($a1)
lw $a0, -4($sp)
sw $a0, -20($sp)
addiu $sp, $sp, -12
branch_132:
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -44($sp)
sw $a0, -24($sp)
#Assignment
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -12($sp)
sw $a0, -4($sp)
#Args: 0
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -20($sp)
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 1  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -4
#Dispatch in place
#obj 4 offset 3  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
lw $a1, -580($sp)
sw $a0, 8($a1)
lw $a0, -4($sp)
sw $a0, -40($sp)
addiu $sp, $sp, -12
branch_133:
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -64($sp)
sw $a0, -44($sp)
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
la $a0, string_135
sw $a0, -4($sp)
#Dispatch in place
#obj 2 offset 149  result IO.out_string
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, ($sp)
addiu $sp, $sp, -8
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Dispatch in place
#obj 1 offset 150  result Object.abort
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal Object.abort
sw $a1, ($sp)
addiu $sp, $sp, -4
#Integer
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $a0, -4($sp)
sw $a0, -20($sp)
addiu $sp, $sp, -12
lw $a0, -4($sp)
sw $a0, -64($sp)
addiu $sp, $sp, -12
lw $a0, -4($sp)
sw $a0, -492($sp)
_fi_105:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -508($sp)
j _fi_103
_if_103:
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Assignment
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $v0, 9
li $a0, 8
syscall
sw $v0, -4($sp)
la $a1, A_VT
sw $a1, ($v0)
lw $a0, -4($sp)
sw $a0, -12($sp)
#DispatchParent in place
#obj 2 offset 1  result A.Constructor
la $v0, 1
jal A.Constructor
sw $a1, ($sp)
addiu $sp, $sp, -8
#Args: 0
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#Dispatch in place
#obj 1 offset 157  result Main.get_int
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal Main.get_int
sw $a1, ($sp)
addiu $sp, $sp, -4
#Dispatch in place
#obj 5 offset 2  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
lw $a1, -628($sp)
sw $a0, 12($a1)
#Assignment
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
li $v0, 9
li $a0, 4
syscall
sw $v0, -4($sp)
la $a1, B_VT
sw $a1, ($v0)
lw $a0, -4($sp)
sw $a0, -12($sp)
#DispatchParent in place
#obj 2 offset 1  result B.Constructor
la $v0, 1
jal B.Constructor
sw $a1, ($sp)
addiu $sp, $sp, -8
#Args: 0
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -652($sp)
lw $a1, 8($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 2 offset 1  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -4
#Args: 1
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, 4
lw $t0, -660($sp)
lw $a1, 12($t0)
sw $a1, -4($sp)
#Dispatch in place
#obj 2 offset 1  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -4
#Dispatch in place
#obj 8 offset 5  result -1
move $t0, $sp
lw $t1, 4($t0)
addi $sp, $sp, 4
sw $t1, 0($sp)
jal IO.out_string
sw $a1, 4($sp)
addiu $sp, $sp, -12
lw $a0, -4($sp)
lw $a1, -660($sp)
sw $a0, 8($a1)
lw $a0, -4($sp)
sw $a0, -56($sp)
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -564($sp)
_fi_103:
addiu $sp, $sp, -8
lw $a0, -4($sp)
sw $a0, -628($sp)
addiu $sp, $sp, -24
addiu $sp, $sp, -8
j _loop_97
_pool_97:
lw $a0, -4($sp)
sw $a0, -652($sp)
addiu $sp, $sp, -8
lw $v0, -4($sp)
addiu $sp, $sp, -4
lw $ra, -4($sp)
addiu $sp, $sp, -4
jr $ra
li $v0, 10
syscall
