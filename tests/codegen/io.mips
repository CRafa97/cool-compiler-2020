.data
buffer: .space 2048
strsubstrexception: .asciiz "Substring index exception"

string_1: .asciiz "A: Hello world\n"
string_2: .asciiz "B: Hello world\n"
string_3: .asciiz "C: Hello world\n"
string_4: .asciiz "D: Hello world\n"
string_5: .asciiz "Done.\n"
Object_INH:
String_INH:
.word Object_INH
Int_INH:
.word Object_INH
Bool_INH:
.word Object_INH
IO_INH:
.word Object_INH
SELF_TYPE_INH:
.word Object_INH
A_INH:
.word Object_INH
B_INH:
.word A_INH
C_INH:
.word IO_INH
D_INH:
.word C_INH
Main_INH:
.word IO_INH
Int_name: .asciiz "Int"
Int_VT:
.word Int_INH
Bool_name: .asciiz "Bool"
Bool_VT:
.word Bool_INH
String_name: .asciiz "String"
String_VT:
.word String_INH
.word String.length
.word String.concat
.word String.substr
Object_name: .asciiz "Object"
Object_VT:
.word Object_INH
.word Object.abort
.word Object.type_name
.word Object.copy
IO_name: .asciiz "IO"
IO_VT:
.word IO_INH
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
A_name: .asciiz "A"
A_VT:
.word A_INH
.word A.out_a
B_name: .asciiz "B"
B_VT:
.word B_INH
.word B.out_b
C_name: .asciiz "C"
C_VT:
.word C_INH
.word C.out_c
D_name: .asciiz "D"
D_VT:
.word D_INH
.word D.out_d
Main_name: .asciiz "Main"
Main_VT:
.word Main_INH
.word Main.main

.globl main
.text
IO.out_string:
sw $ra, 0($sp)
addiu $sp, $sp, -4
li $v0, 4
lw $a0, 8($sp)
syscall
jr $ra


IO.out_int:
li $v0, 1
lw $a0, -4($sp)
syscall
jr $ra


IO.in_string:
move $fp, $sp
sw $ra, 0($sp)
addiu $sp, $sp, -4
la $a0, buffer
li $a1, 1024
li $v0, 8
syscall
sw $fp, 0($sp)
addiu $sp, $sp, -4
sw $a0, 0($sp)
addiu $sp, $sp, -4
jal String.length
addiu $a0, $a0, 1
li $v0, 9
syscall
move $t0, $v0
la $a0, buffer


IO.in_int:
li $v0, 5
syscall
jr $ra
Object.copy:
lw $a1, -4($sp)
lw $a0, -8($sp)
li $v0, 9
syscall
lw $a1, -4($sp)
lw $a0, 4($a1)
move $a3, $v0
_copy.loop:
lw $a2, 0($a1)
sw $a2, 0($a3)
addiu $a0, $a0, -1
addiu $a1, $a1, 4
addiu $a3, $a3, 4
beq $a0, $zero, _copy.end
j _copy.loop
_copy.end:
jr $ra


Object.abort:
li $v0, 10
syscall


String.length:
lw $a0, 4($sp)
_stringlength.loop:
lb $a1, 0($sp)
beqz $a1, _stringlength.end
addiu $a0, $a0, 1
j _stringlength.loop
_stringlength.end:
j Object.abort
lw $a1, 4($sp)
subu $v0, $a0, $a1
jr $ra


String.concat:
move $a2, $ra
jal String.length
move $v1, $v0
addiu $sp, $sp, -4
jal String.length
addiu $sp, $sp, 4
add $v1, $v1, $v0
addi $v1, $v1, 1
li $v0, 9
move $a0, $v1
syscall
move $v1, $v0
lw $a0, 0($sp)
_stringconcat.loop1:
lb $a1, 0($a0)
beqz $a1, _stringconcat.end1
sb $a1, 0($v1)
addiu $a0, $a0, 1
addiu $v1, $v1, 1
j _stringconcat.loop1
_stringconcat.end1:
lw $a0, -4($sp)
_stringconcat.loop2:
lb $a1, 0($a0)
beqz $a1, _stringconcat.end2
sb $a1, 0($v1)
addiu $a0, $a0, 1
addiu $v1, $v1, 1
j _stringconcat.loop2
_stringconcat.end2:
sb $zero, 0($v1)
move $ra, $a2
jr $ra

String.substr:
lw $a0, -12($sp)
addiu $a0, $a0, 1
li $v0, 9
syscall
move $v1, $v0
lw $a0, -4($sp)
lw $a1, -8($sp)
add $a0, $a0, $a1
lw $a2, -12($sp)
_stringsubstr.loop:
beqz $a2, _stringsubstr.end
lb $a1, 0($a0)
beqz $a1, _substrexception
sb $a1, 0($v1)
addiu $a0, $a0, 1
addiu $v1, $v1, 1
addiu $a2, $a2, -1
j _stringsubstr.loop
_stringsubstr.end:
sb $zero, 0($v1)
jr $ra


_substrexception:
la $a0, strsubstrexception
li $v0, 4
syscall
li $v0, 10
syscall


_stringcmp:
li $v0, 1
_stringcmp.loop:
lb $a2, 0($a0)
lb $a3, 0($a1)
beqz $a2, _stringcmp.end
beq $a2, $zero, _stringcmp.end
beq $a3, $zero, _stringcmp.end
bne $a2, $a3, _stringcmp.differents
addiu $a0, $a0, 1
addiu $a1, $a1, 1
j _stringcmp.loop
_stringcmp.end:
beq $a2, $a3, _stringcmp.equals
_stringcmp.differents:
li $v0, 0
jr $ra
_stringcmp.equals:
li $v0, 1
jr $ra
inherit:
beq $a0, $a1, inherit_true
beq $a0, $zero, inherit_false
lw $a0, ($a0)
j inherit
inherit_true:
li $v0, 1
jr $ra
inherit_false:
li $v0, 0
jr $ra

Object.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $v0, 4($sp)
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
jr $ra
Object.type_name:
sw $ra, 0($sp)
addiu $sp, $sp, -4
la $a1, Object_name
jr $ra
Int.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $v0, 4($sp)
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
jr $ra
Int.type_name:
sw $ra, 0($sp)
addiu $sp, $sp, -4
la $a1, Int_name
jr $ra
IO.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $v0, 4($sp)
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
jr $ra
IO.type_name:
sw $ra, 0($sp)
addiu $sp, $sp, -4
la $a1, IO_name
jr $ra
Bool.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $v0, 4($sp)
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
jr $ra
Bool.type_name:
sw $ra, 0($sp)
addiu $sp, $sp, -4
la $a1, Bool_name
jr $ra
String.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $v0, 4($sp)
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
jr $ra
String.type_name:
sw $ra, 0($sp)
addiu $sp, $sp, -4
la $a1, String_name
jr $ra
#--------------Initial Code---------------
main:
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $v0, 9
li $a0, 4
syscall
sw $v0, 4($sp)
la $a1, Main_VT
sw $a1, ($v0)
#DispatchParent in place
#obj 2 offset 1  result Main.Constructor
la $v0, 1
jal Main.Constructor
sw $a1, 0($sp)
addi $sp, $sp, -4
#Dispatch in place
#obj 3 offset 1  result Main.main
jal Main.main
sw $a1, 0($sp)
addi $sp, $sp, -4
j Object.abort
#--------------End Initial Code---------------
A.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $v0, 9
li $a0, 4
syscall
sw $v0, 4($sp)
la $a1, IO_VT
sw $a1, ($v0)
lw $t0, 4($sp)
sw $t0, 12($sp)
#DispatchParent in place
#obj 2 offset 1  result IO.Constructor
la $v0, 1
jal IO.Constructor
sw $a1, 0($sp)
addi $sp, $sp, -4
addiu $sp, $sp, 8
lw $t0, 4($sp)
lw $t1, 20($sp)
sw $t1, 4($sp)
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $v0, 4($sp)
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
jr $ra
A.type_name:
sw $ra, 0($sp)
addiu $sp, $sp, -4
la $a1, A_name
jr $ra
A.out_a:
sw $ra, 0($sp)
addiu $sp, $sp, -4
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 16($sp)
lw $t1, 4($t0)
sw $t1, 4($sp)
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
la $a0, string_1
sw $a0, 0($sp)
addi $sp, $sp, -4
#Dispatch in place
#obj 3 offset 1  result IO.out_string
jal IO.out_string
sw $a1, 0($sp)
addi $sp, $sp, -4
addiu $sp, $sp, 8
lw $v0, 4($sp)
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
jr $ra
B.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $v0, 4($sp)
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
jr $ra
B.type_name:
sw $ra, 0($sp)
addiu $sp, $sp, -4
la $a1, B_name
jr $ra
B.out_b:
sw $ra, 0($sp)
addiu $sp, $sp, -4
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 16($sp)
lw $t1, -4($t0)
sw $t1, 4($sp)
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
la $a0, string_2
sw $a0, 0($sp)
addi $sp, $sp, -4
#Dispatch in place
#obj 3 offset 1  result IO.out_string
jal IO.out_string
sw $a1, 0($sp)
addi $sp, $sp, -4
addiu $sp, $sp, 8
lw $v0, 4($sp)
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
jr $ra
C.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $v0, 4($sp)
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
jr $ra
C.type_name:
sw $ra, 0($sp)
addiu $sp, $sp, -4
la $a1, C_name
jr $ra
C.out_c:
sw $ra, 0($sp)
addiu $sp, $sp, -4
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
#push self
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 16($sp)
sw $t0, 4($sp)
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
la $a0, string_3
sw $a0, 0($sp)
addi $sp, $sp, -4
#Dispatch in place
#obj 3 offset 5  result IO.out_string
jal IO.out_string
sw $a1, 0($sp)
addi $sp, $sp, -4
addiu $sp, $sp, 4
lw $v0, 4($sp)
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
jr $ra
D.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $v0, 4($sp)
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
jr $ra
D.type_name:
sw $ra, 0($sp)
addiu $sp, $sp, -4
la $a1, D_name
jr $ra
D.out_d:
sw $ra, 0($sp)
addiu $sp, $sp, -4
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
#push self
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $t0, 16($sp)
sw $t0, 4($sp)
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
la $a0, string_4
sw $a0, 0($sp)
addi $sp, $sp, -4
#Dispatch in place
#obj 3 offset 5  result IO.out_string
jal IO.out_string
sw $a1, 0($sp)
addi $sp, $sp, -4
addiu $sp, $sp, 4
lw $v0, 4($sp)
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
jr $ra
Main.Constructor:
sw $ra, 0($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
lw $v0, 4($sp)
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addi $sp, $sp, -4
jr $ra
Main.type_name:
sw $ra, 0($sp)
addiu $sp, $sp, -4
la $a1, Main_name
jr $ra
Main.main:
sw $ra, 0($sp)
addiu $sp, $sp, -4
#Block
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $v0, 9
li $a0, 8
syscall
sw $v0, 4($sp)
la $a1, A_VT
sw $a1, ($v0)
lw $t0, 4($sp)
sw $t0, 12($sp)
#DispatchParent in place
#obj 2 offset 1  result A.Constructor
la $v0, 1
jal A.Constructor
sw $a1, 0($sp)
addi $sp, $sp, -4
addiu $sp, $sp, 8
#Dispatch in place
#obj 4 offset 1  result -1
jal IO.out_string
sw $a1, 0($sp)
addi $sp, $sp, -4
addiu $sp, $sp, 4
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $v0, 9
li $a0, 4
syscall
sw $v0, 4($sp)
la $a1, B_VT
sw $a1, ($v0)
lw $t0, 4($sp)
sw $t0, 12($sp)
#DispatchParent in place
#obj 2 offset 1  result B.Constructor
la $v0, 1
jal B.Constructor
sw $a1, 0($sp)
addi $sp, $sp, -4
addiu $sp, $sp, 8
#Dispatch in place
#obj 4 offset 1  result -1
jal IO.out_string
sw $a1, 0($sp)
addi $sp, $sp, -4
addiu $sp, $sp, 4
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $v0, 9
li $a0, 4
syscall
sw $v0, 4($sp)
la $a1, C_VT
sw $a1, ($v0)
lw $t0, 4($sp)
sw $t0, 12($sp)
#DispatchParent in place
#obj 2 offset 1  result C.Constructor
la $v0, 1
jal C.Constructor
sw $a1, 0($sp)
addi $sp, $sp, -4
addiu $sp, $sp, 8
#Dispatch in place
#obj 4 offset 1  result -1
jal IO.out_string
sw $a1, 0($sp)
addi $sp, $sp, -4
addiu $sp, $sp, 4
#Point-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
#push object
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
li $v0, 9
li $a0, 4
syscall
sw $v0, 4($sp)
la $a1, D_VT
sw $a1, ($v0)
lw $t0, 4($sp)
sw $t0, 12($sp)
#DispatchParent in place
#obj 2 offset 1  result D.Constructor
la $v0, 1
jal D.Constructor
sw $a1, 0($sp)
addi $sp, $sp, -4
addiu $sp, $sp, 8
#Dispatch in place
#obj 4 offset 1  result -1
jal IO.out_string
sw $a1, 0($sp)
addi $sp, $sp, -4
addiu $sp, $sp, 4
#Self-Dispatch
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
#Args: 0
#loading label
li $a0, 0
sw $a0, ($sp)
addiu $sp, $sp, -4
la $a0, string_5
sw $a0, 0($sp)
addi $sp, $sp, -4
#Dispatch in place
#obj 2 offset 25  result IO.out_string
jal IO.out_string
sw $a1, 0($sp)
addi $sp, $sp, -4
addiu $sp, $sp, 8
lw $t0, 4($sp)
sw $t0, 92($sp)
addiu $sp, $sp, 20
li $v0, 10
syscall
