.TYPES
type Object {
	

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
}
type Int {
	attribute value

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
}
type String {
	attribute value

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method length : String.length
	method concat : String.concat
	method substr : String.substr
}
type Bool {
	attribute value

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
}
type IO {
	

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method out_string : IO.out_string
	method out_int : IO.out_int
	method in_string : IO.in_string
	method in_int : IO.in_int
}
type Main {
	

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method out_string : IO.out_string
	method out_int : IO.out_int
	method in_string : IO.in_string
	method in_int : IO.in_int
	method main : Main.main
}

.DATA
s_0: Abort called from class 
s_1: 

empty_str: 
s_3: \n

.CODE
function main {
	

	LOCAL instance_0
	LOCAL result_1

	instance_0 = ALLOCATE Main
	result_1 = CALL Main_init
	result_1 = CALL Main.main
	
 RETURN 
}
function Object_init {
	PARAM self

	

	
 RETURN 
}
function Object.abort {
	PARAM self

	LOCAL msg_0
	LOCAL type_name_1
	LOCAL eol_2

	msg_0 = LOAD s_0
	PRINT_STR msg_0
	type_name_1 = TYPEOF self
	PRINT_STR type_name_1
	eol_2 = LOAD s_1
	PRINT_STR eol_2
	HALT
}
function Object.type_name {
	PARAM self

	LOCAL type_name_0
	LOCAL instance_1
	LOCAL result_init_2

	type_name_0 = TYPEOF self
	instance_1 = ALLOCATE String
	result_init_2 = CALL String_init
	
 RETURN instance_1
}
function Object.copy {
	PARAM self

	LOCAL copy_0

	copy_0 = COPY self
	
 RETURN copy_0
}
function IO_init {
	PARAM self

	

	
 RETURN 
}
function IO.out_string {
	PARAM self
	PARAM x

	LOCAL v_0

	v_0 = GetAttr x value 
	PRINT_STR v_0
	
 RETURN self
}
function IO.out_int {
	PARAM self
	PARAM x

	LOCAL v_0

	v_0 = GetAttr x value 
	PRINT_INT v_0
	
 RETURN self
}
function IO.in_string {
	PARAM self

	LOCAL read_str_0
	LOCAL instance_1
	LOCAL result_init_2

	read_str_0 = READ STR
	instance_1 = ALLOCATE String
	result_init_2 = CALL String_init
	
 RETURN instance_1
}
function IO.in_int {
	PARAM self

	LOCAL read_int_0
	LOCAL instance_1
	LOCAL result_init_2

	read_int_0 = READ INT
	instance_1 = ALLOCATE Int
	result_init_2 = CALL Int_init
	
 RETURN instance_1
}
function String_init {
	PARAM self
	PARAM v

	

	SetAttr self value v
	
 RETURN 
}
function String.length {
	PARAM self

	LOCAL length_0
	LOCAL instance_1
	LOCAL result_init_2

	length_0 = LENGTH self
	instance_1 = ALLOCATE Int
	result_init_2 = CALL Int_init
	
 RETURN instance_1
}
function String.concat {
	PARAM self
	PARAM s

	LOCAL str1_0
	LOCAL len1_1
	LOCAL str2_2
	LOCAL len2_3
	LOCAL local_len1_4
	LOCAL local_len2_5
	LOCAL concat_6
	LOCAL instance_7
	LOCAL result_init_8

	str1_0 = GetAttr self value 
	len1_1 = CALL String.length
	str2_2 = GetAttr s value 
	len2_3 = CALL String.length
	local_len1_4 = GetAttr len1_1 value 
	local_len2_5 = GetAttr len2_3 value 
	concat_6 = CONCAT str1_0  str2_2
	instance_7 = ALLOCATE String
	result_init_8 = CALL String_init
	
 RETURN instance_7
}
function String.substr {
	PARAM self
	PARAM i
	PARAM l

	LOCAL i_value_0
	LOCAL l_value_1
	LOCAL subs_result_2
	LOCAL instance_3
	LOCAL result_init_4

	i_value_0 = GetAttr i value 
	l_value_1 = GetAttr l value 
	subs_result_2 = SUBSTR i_value_0  l_value_1  self
	instance_3 = ALLOCATE String
	result_init_4 = CALL String_init
	
 RETURN instance_3
}
function Bool_init {
	PARAM self
	PARAM v

	

	SetAttr self value v
	
 RETURN 
}
function Int_init {
	PARAM self
	PARAM v

	

	SetAttr self value v
	
 RETURN 
}
function String_equals {
	PARAM str1
	PARAM str2

	LOCAL str1_0
	LOCAL str2_1
	LOCAL comparison_result_2

	str1_0 = GetAttr str1 value 
	str2_1 = GetAttr str2 value 
	comparison_result_2 = str1_0 = str2_1
	
 RETURN comparison_result_2
}
function Main_init {
	PARAM self

	LOCAL result_0

	result_0 = CALL IO_init
	
 RETURN 
}
function Main.main {
	PARAM self

	LOCAL result_0
	LOCAL result_1
	LOCAL result_2
	LOCAL result_3
	LOCAL result_4
	LOCAL init_5
	LOCAL instance_6
	LOCAL value_7
	LOCAL result_init_8
	LOCAL instance_9
	LOCAL value_10
	LOCAL result_init_11
	LOCAL result_12
	LOCAL result_13
	LOCAL isvoid_result_14
	LOCAL instance_15
	LOCAL result_init_16
	LOCAL instance_17
	LOCAL value_18
	LOCAL result_init_19
	LOCAL instance_20
	LOCAL value_21
	LOCAL result_init_22
	LOCAL result_23
	LOCAL internal_24
	LOCAL instance_25
	LOCAL result_init_26

	result_4 = ALLOCATE Object
	init_5 = CALL Object_init
	result_3 = VCALL type Object {
	[method] abort(): Object;
	[method] type_name(): String;
	[method] copy(): Object;
}
 type_name 
	instance_6 = ALLOCATE Int
	value_7 = LOAD 1
	result_init_8 = CALL Int_init
	instance_9 = ALLOCATE Int
	value_10 = LOAD 4
	result_init_11 = CALL Int_init
	result_2 = VCALL type String : Object {
	[method] length(): Int;
	[method] concat(s:String): String;
	[method] substr(i:Int, l:Int): String;
}
 substr 
	result_1 = VCALL Main out_string 
	isvoid_result_14 ISVOID self
	instance_15 = ALLOCATE Bool
	result_init_16 = CALL Bool_init
	result_13 = VCALL type Bool : Object {}
 type_name 
	instance_17 = ALLOCATE Int
	value_18 = LOAD 3
	result_init_19 = CALL Int_init
	instance_20 = ALLOCATE Int
	value_21 = LOAD 1
	result_init_22 = CALL Int_init
	result_12 = VCALL type String : Object {
	[method] length(): Int;
	[method] concat(s:String): String;
	[method] substr(i:Int, l:Int): String;
}
 substr 
	result_0 = VCALL type IO : Object {
	[method] out_string(x:String): IO;
	[method] out_int(x:Int): IO;
	[method] in_string(): String;
	[method] in_int(): Int;
}
 out_string 
	internal_24 = LOAD s_3
	instance_25 = ALLOCATE String
	result_init_26 = CALL String_init
	result_23 = VCALL Main out_string 
	
 RETURN result_23
}