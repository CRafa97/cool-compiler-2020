.TYPES
type Object {
	

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
}
type Int {
	attribute value

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
}
type String {
	attribute value

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method length : String.length
	method concat : String.concat
	method substr : String.substr
}
type Bool {
	attribute value

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
}
type IO {
	

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method out_string : IO.out_string
	method out_int : IO.out_int
	method in_string : IO.in_string
	method in_int : IO.in_int
}
type Main {
	attribute out
	attribute testee
	attribute divisor
	attribute stop
	attribute m

	method abort : Object.abort
	method type_name : Object.type_name
	method copy : Object.copy
	method out_string : IO.out_string
	method out_int : IO.out_int
	method in_string : IO.in_string
	method in_int : IO.in_int
	method main : Main.main
}

.DATA
s_0: Abort called from class 
s_1: 

empty_str: 
s_3: 2 is trivially prime.

s_4:  is prime.

s_5: continue
s_6: halt

.CODE
function main {
	

	LOCAL instance_0
	LOCAL result_1

	instance_0 = ALLOCATE Main
	result_1 = CALL Main_init
	result_1 = CALL Main.main
	
 RETURN 
}
function Object_init {
	PARAM self

	

	
 RETURN 
}
function Object.abort {
	PARAM self

	LOCAL msg_0
	LOCAL type_name_1
	LOCAL eol_2

	msg_0 = LOAD s_0
	PRINT msg_0
	type_name_1 = TYPEOF self
	PRINT type_name_1
	eol_2 = LOAD s_1
	PRINT eol_2
	HALT
}
function Object.type_name {
	PARAM self

	LOCAL type_name_0
	LOCAL instance_1
	LOCAL result_init_2

	type_name_0 = TYPEOF self
	instance_1 = ALLOCATE String
	result_init_2 = CALL String_init
	
 RETURN instance_1
}
function Object.copy {
	PARAM self

	LOCAL copy_0

	copy_0 = COPY self
	
 RETURN copy_0
}
function IO_init {
	PARAM self

	

	
 RETURN 
}
function IO.out_string {
	PARAM self
	PARAM x

	LOCAL v_0

	v_0 = GetAttr x value 
	PRINT v_0
	
 RETURN self
}
function IO.out_int {
	PARAM self
	PARAM x

	LOCAL v_0

	v_0 = GetAttr x value 
	PRINT v_0
	
 RETURN self
}
function IO.in_string {
	PARAM self

	LOCAL read_str_0
	LOCAL instance_1
	LOCAL result_init_2

	read_str_0 = READ
	instance_1 = ALLOCATE String
	result_init_2 = CALL String_init
	
 RETURN instance_1
}
function IO.in_int {
	PARAM self

	LOCAL read_int_0
	LOCAL instance_1
	LOCAL result_init_2

	read_int_0 = READ
	instance_1 = ALLOCATE Int
	result_init_2 = CALL Int_init
	
 RETURN instance_1
}
function String_init {
	PARAM self
	PARAM v

	

	SetAttr self value v
	
 RETURN 
}
function String.length {
	PARAM self

	LOCAL length_0
	LOCAL instance_1
	LOCAL result_init_2

	length_0 = LENGTH self
	instance_1 = ALLOCATE Int
	result_init_2 = CALL Int_init
	
 RETURN instance_1
}
function String.concat {
	PARAM self
	PARAM s

	LOCAL str1_0
	LOCAL len1_1
	LOCAL str2_2
	LOCAL len2_3
	LOCAL local_len1_4
	LOCAL local_len2_5
	LOCAL concat_6
	LOCAL instance_7
	LOCAL result_init_8

	str1_0 = GetAttr self value 
	len1_1 = CALL String.length
	str2_2 = GetAttr s value 
	len2_3 = CALL String.length
	local_len1_4 = GetAttr len1_1 value 
	local_len2_5 = GetAttr len2_3 value 
	concat_6 = CONCAT str1_0  str2_2
	instance_7 = ALLOCATE String
	result_init_8 = CALL String_init
	
 RETURN instance_7
}
function String.substr {
	PARAM self
	PARAM i
	PARAM l

	LOCAL i_value_0
	LOCAL l_value_1
	LOCAL subs_result_2
	LOCAL instance_3
	LOCAL result_init_4

	i_value_0 = GetAttr i value 
	l_value_1 = GetAttr l value 
	subs_result_2 = SUBSTR i_value_0  l_value_1  self
	instance_3 = ALLOCATE String
	result_init_4 = CALL String_init
	
 RETURN instance_3
}
function Bool_init {
	PARAM self
	PARAM v

	

	SetAttr self value v
	
 RETURN 
}
function Int_init {
	PARAM self
	PARAM v

	

	SetAttr self value v
	
 RETURN 
}
function String_equals {
	PARAM str1
	PARAM str2

	LOCAL str1_0
	LOCAL str2_1
	LOCAL comparison_result_2

	str1_0 = GetAttr str1 value 
	str2_1 = GetAttr str2 value 
	comparison_result_2 = str1_0 = str2_1
	
 RETURN comparison_result_2
}
function Main_init {
	PARAM self

	LOCAL result_0
	LOCAL result_1
	LOCAL internal_2
	LOCAL instance_3
	LOCAL result_init_4
	LOCAL instance_5
	LOCAL value_6
	LOCAL result_init_7
	LOCAL Main.out
	LOCAL instance_9
	LOCAL value_10
	LOCAL result_init_11
	LOCAL instance_12
	LOCAL value_13
	LOCAL result_init_14
	LOCAL result_15
	LOCAL instance_16
	LOCAL value_17
	LOCAL result_init_18
	LOCAL result_19
	LOCAL op_20
	LOCAL left_21
	LOCAL right_22
	LOCAL Main.testee
	LOCAL instance_24
	LOCAL value_25
	LOCAL result_init_26
	LOCAL result_init_27
	LOCAL result_28
	LOCAL instance_29
	LOCAL value_30
	LOCAL result_init_31
	LOCAL result_32
	LOCAL result_33
	LOCAL result_34
	LOCAL result_35
	LOCAL op_36
	LOCAL left_37
	LOCAL right_38
	LOCAL Main.testee
	LOCAL result_40
	LOCAL op_41
	LOCAL left_42
	LOCAL right_43
	LOCAL Main.divisor
	LOCAL Main.divisor
	LOCAL result_init_46
	LOCAL result_init_47
	LOCAL result_48
	LOCAL result_49
	LOCAL op_50
	LOCAL left_51
	LOCAL right_52
	LOCAL result_53
	LOCAL op_54
	LOCAL left_55
	LOCAL right_56
	LOCAL Main.testee
	LOCAL result_58
	LOCAL op_59
	LOCAL left_60
	LOCAL right_61
	LOCAL Main.divisor
	LOCAL result_63
	LOCAL op_64
	LOCAL left_65
	LOCAL right_66
	LOCAL Main.testee
	LOCAL Main.divisor
	LOCAL result_init_69
	LOCAL result_init_70
	LOCAL result_init_71
	LOCAL instance_72
	LOCAL value_73
	LOCAL result_init_74
	LOCAL result_init_75
	LOCAL instance_76
	LOCAL value_77
	LOCAL result_init_78
	LOCAL instance_79
	LOCAL value_80
	LOCAL result_init_81
	LOCAL instance_82
	LOCAL value_83
	LOCAL result_init_84
	LOCAL result_85
	LOCAL op_86
	LOCAL left_87
	LOCAL right_88
	LOCAL Main.divisor
	LOCAL instance_90
	LOCAL value_91
	LOCAL result_init_92
	LOCAL result_init_93
	LOCAL result_94
	LOCAL result_95
	LOCAL result_96
	LOCAL op_97
	LOCAL left_98
	LOCAL right_99
	LOCAL Main.testee
	LOCAL result_101
	LOCAL op_102
	LOCAL left_103
	LOCAL right_104
	LOCAL Main.divisor
	LOCAL Main.divisor
	LOCAL result_init_107
	LOCAL result_init_108
	LOCAL instance_109
	LOCAL value_110
	LOCAL result_init_111
	LOCAL Main.testee
	LOCAL result_113
	LOCAL result_114
	LOCAL Main.out
	LOCAL result_116
	LOCAL internal_117
	LOCAL instance_118
	LOCAL result_init_119
	LOCAL result_120
	LOCAL result_121
	LOCAL op_122
	LOCAL left_123
	LOCAL right_124
	LOCAL Main.stop
	LOCAL Main.testee
	LOCAL result_init_127
	LOCAL internal_128
	LOCAL instance_129
	LOCAL result_init_130
	LOCAL result_131
	LOCAL internal_132
	LOCAL instance_133
	LOCAL result_init_134

	result_0 = CALL IO_init
	
 RETURN 
	internal_2 = LOAD s_3
	instance_3 = ALLOCATE String
	result_init_4 = CALL String_init
	result_1 = VCALL Main out_string 
	instance_5 = ALLOCATE Int
	value_6 = LOAD 2
	result_init_7 = CALL Int_init
	SetAttr self out instance_5
	Main.out = GetAttr self out 
	SetAttr self testee Main.out
	instance_9 = ALLOCATE Int
	value_10 = LOAD 0
	result_init_11 = CALL Int_init
	SetAttr self divisor instance_9
	instance_12 = ALLOCATE Int
	value_13 = LOAD 500
	result_init_14 = CALL Int_init
	SetAttr self stop instance_12
	LABEL label_1
	instance_16 = ALLOCATE Bool
	value_17 = LOAD 1
	result_init_18 = CALL Bool_init
	IF instance_16 GOTO label_2
	GOTO label_3
	LABEL label_2
	Main.testee = GetAttr self testee 
	instance_24 = ALLOCATE Int
	value_25 = LOAD 1
	result_init_26 = CALL Int_init
	left_21 = GetAttr Main.testee value 
	right_22 = GetAttr instance_24 value 
	op_20 = left_21 + right_22
	result_19 = ALLOCATE Int
	result_init_27 = CALL Int_init
	SetAttr self testee result_19
	instance_29 = ALLOCATE Int
	value_30 = LOAD 2
	result_init_31 = CALL Int_init
	SetAttr self divisor instance_29
	LABEL label_4
	Main.testee = GetAttr self testee 
	Main.divisor = GetAttr self divisor 
	Main.divisor = GetAttr self divisor 
	left_42 = GetAttr Main.divisor value 
	right_43 = GetAttr Main.divisor value 
	op_41 = left_42 * right_43
	result_40 = ALLOCATE Int
	result_init_46 = CALL Int_init
	left_37 = GetAttr Main.testee value 
	right_38 = GetAttr result_40 value 
	op_36 = left_37 < right_38
	result_35 = ALLOCATE Bool
	result_init_47 = CALL Bool_init
	IF result_35 GOTO label_7
	Main.testee = GetAttr self testee 
	Main.divisor = GetAttr self divisor 
	Main.testee = GetAttr self testee 
	Main.divisor = GetAttr self divisor 
	left_65 = GetAttr Main.testee value 
	right_66 = GetAttr Main.divisor value 
	op_64 = left_65 / right_66
	result_63 = ALLOCATE Int
	result_init_69 = CALL Int_init
	left_60 = GetAttr Main.divisor value 
	right_61 = GetAttr result_63 value 
	op_59 = left_60 * right_61
	result_58 = ALLOCATE Int
	result_init_70 = CALL Int_init
	left_55 = GetAttr Main.testee value 
	right_56 = GetAttr result_58 value 
	op_54 = left_55 - right_56
	result_53 = ALLOCATE Int
	result_init_71 = CALL Int_init
	instance_72 = ALLOCATE Int
	value_73 = LOAD 0
	result_init_74 = CALL Int_init
	left_51 = GetAttr result_53 value 
	right_52 = GetAttr instance_72 value 
	op_50 = left_51 = right_52
	result_49 = ALLOCATE Bool
	result_init_75 = CALL Bool_init
	IF result_49 GOTO label_8
	instance_76 = ALLOCATE Bool
	value_77 = LOAD 1
	result_init_78 = CALL Bool_init
	result_48 = instance_76
	GOTO label_9
	LABEL label_8
	instance_79 = ALLOCATE Bool
	value_80 = LOAD 0
	result_init_81 = CALL Bool_init
	result_48 = instance_79
	LABEL label_9
	result_34 = result_48
	GOTO label_10
	LABEL label_7
	instance_82 = ALLOCATE Bool
	value_83 = LOAD 0
	result_init_84 = CALL Bool_init
	result_34 = instance_82
	LABEL label_10
	IF result_34 GOTO label_5
	GOTO label_6
	LABEL label_5
	Main.divisor = GetAttr self divisor 
	instance_90 = ALLOCATE Int
	value_91 = LOAD 1
	result_init_92 = CALL Int_init
	left_87 = GetAttr Main.divisor value 
	right_88 = GetAttr instance_90 value 
	op_86 = left_87 + right_88
	result_85 = ALLOCATE Int
	result_init_93 = CALL Int_init
	SetAttr self divisor result_85
	GOTO label_4
	LABEL label_6
	result_33 = LOAD VOID
	Main.testee = GetAttr self testee 
	Main.divisor = GetAttr self divisor 
	Main.divisor = GetAttr self divisor 
	left_103 = GetAttr Main.divisor value 
	right_104 = GetAttr Main.divisor value 
	op_102 = left_103 * right_104
	result_101 = ALLOCATE Int
	result_init_107 = CALL Int_init
	left_98 = GetAttr Main.testee value 
	right_99 = GetAttr result_101 value 
	op_97 = left_98 < right_99
	result_96 = ALLOCATE Bool
	result_init_108 = CALL Bool_init
	IF result_96 GOTO label_11
	instance_109 = ALLOCATE Int
	value_110 = LOAD 0
	result_init_111 = CALL Int_init
	result_95 = instance_109
	GOTO label_12
	LABEL label_11
	Main.testee = GetAttr self testee 
	SetAttr self out Main.testee
	Main.out = GetAttr self out 
	result_114 = VCALL Main out_int 
	internal_117 = LOAD s_4
	instance_118 = ALLOCATE String
	result_init_119 = CALL String_init
	result_116 = VCALL Main out_string 
	result_95 = result_116
	LABEL label_12
	Main.stop = GetAttr self stop 
	Main.testee = GetAttr self testee 
	left_123 = GetAttr Main.stop value 
	right_124 = GetAttr Main.testee value 
	op_122 = left_123 <= right_124
	result_121 = ALLOCATE Bool
	result_init_127 = CALL Bool_init
	IF result_121 GOTO label_13
	internal_128 = LOAD s_5
	instance_129 = ALLOCATE String
	result_init_130 = CALL String_init
	result_120 = instance_129
	GOTO label_14
	LABEL label_13
	internal_132 = LOAD s_6
	instance_133 = ALLOCATE String
	result_init_134 = CALL String_init
	result_131 = VCALL String abort 
	result_120 = result_131
	LABEL label_14
	GOTO label_1
	LABEL label_3
	result_15 = LOAD VOID
	SetAttr self m result_15
}
function Main.main {
	PARAM self

	LOCAL instance_0
	LOCAL value_1
	LOCAL result_init_2

	instance_0 = ALLOCATE Int
	value_1 = LOAD 0
	result_init_2 = CALL Int_init
	
 RETURN instance_0
}